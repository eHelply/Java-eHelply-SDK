/*
 * eHelply SDK - 1.1.89
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.89
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateKeyResponse;
import org.openapitools.client.model.GetAppointment403Response;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.Page;
import org.openapitools.client.model.ProjectDB;
import org.openapitools.client.model.ProjectsProjectCreate;
import org.openapitools.client.model.ProjectsProjectGet;
import org.openapitools.client.model.ProjectsProjectMemberDB;
import org.openapitools.client.model.ProjectsProjectUpdate;
import org.openapitools.client.model.ProjectsProjectUsageDB;
import org.openapitools.client.model.ProjectsUsageTypeCreate;
import org.openapitools.client.model.ProjectsUsageTypeDB;
import org.openapitools.client.model.ProjectsUsageTypeGet;
import org.openapitools.client.model.ProjectsUsageTypeUpdate;
import org.openapitools.client.model.ResponseAddmembertoproject;
import org.openapitools.client.model.ResponseArchiveproject;
import org.openapitools.client.model.ResponseDeleteusagetype;
import org.openapitools.client.model.ResponseRemovememberfromproject;
import org.openapitools.client.model.SecurityKeyCreate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Addmembertoproject
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMemberToProjectTest() throws ApiException {
        String projectUuid = null;
        String entityUuid = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        ResponseAddmembertoproject response = api.addMemberToProject(projectUuid, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Archiveproject
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveProjectTest() throws ApiException {
        String projectUuid = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        ResponseArchiveproject response = api.archiveProject(projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Createproject
     *
     * Create a new Project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        ProjectsProjectCreate projectsProjectCreate = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        ProjectDB response = api.createProject(projectsProjectCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Createprojectkey
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectKeyTest() throws ApiException {
        String projectUuid = null;
        SecurityKeyCreate securityKeyCreate = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        CreateKeyResponse response = api.createProjectKey(projectUuid, securityKeyCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Createusagetype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUsageTypeTest() throws ApiException {
        ProjectsUsageTypeCreate projectsUsageTypeCreate = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        ProjectsUsageTypeDB response = api.createUsageType(projectsUsageTypeCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Deleteprojectkey
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectKeyTest() throws ApiException {
        String projectUuid = null;
        String accessToken = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        String response = api.deleteProjectKey(projectUuid, accessToken, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Deleteusagetype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsageTypeTest() throws ApiException {
        String usageTypeKey = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        ResponseDeleteusagetype response = api.deleteUsageType(usageTypeKey, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Getallprojectusage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllProjectUsageTest() throws ApiException {
        String projectUuid = null;
        Integer year = null;
        Integer month = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        List<ProjectsProjectUsageDB> response = api.getAllProjectUsage(projectUuid, year, month, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Getmemberprojects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberProjectsTest() throws ApiException {
        String entityUuid = null;
        String role = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        List<ProjectsProjectGet> response = api.getMemberProjects(entityUuid, role, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Getproject
     *
     * Get a Project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTest() throws ApiException {
        String projectUuid = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        ProjectDB response = api.getProject(projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Getprojectkeys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectKeysTest() throws ApiException {
        String projectUuid = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        List<ProjectsProjectMemberDB> response = api.getProjectKeys(projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Getprojectmembers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectMembersTest() throws ApiException {
        String projectUuid = null;
        String role = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        List<ProjectsProjectMemberDB> response = api.getProjectMembers(projectUuid, role, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Getspecificprojectusage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificProjectUsageTest() throws ApiException {
        String usageTypeKey = null;
        String projectUuid = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        ProjectsProjectUsageDB response = api.getSpecificProjectUsage(usageTypeKey, projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Getusagetype
     *
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsageTypeTest() throws ApiException {
        String usageTypeKey = null;
        ProjectsUsageTypeGet response = api.getUsageType(usageTypeKey);
        // TODO: test validations
    }

    /**
     * Removememberfromproject
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMemberFromProjectTest() throws ApiException {
        String projectUuid = null;
        String entityUuid = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        ResponseRemovememberfromproject response = api.removeMemberFromProject(projectUuid, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Searchprojects
     *
     * Search projects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchProjectsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String searchOn = null;
        String sortOn = null;
        Boolean sortDesc = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        Page response = api.searchProjects(page, pageSize, search, searchOn, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Searchusagetype
     *
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchUsageTypeTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String searchOn = null;
        String sortOn = null;
        Boolean sortDesc = null;
        Page response = api.searchUsageType(page, pageSize, search, searchOn, sortOn, sortDesc);
        // TODO: test validations
    }

    /**
     * Updateproject
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        String projectUuid = null;
        ProjectsProjectUpdate projectsProjectUpdate = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        Object response = api.updateProject(projectUuid, projectsProjectUpdate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

    /**
     * Updateusagetype
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUsageTypeTest() throws ApiException {
        String usageTypeKey = null;
        ProjectsUsageTypeUpdate projectsUsageTypeUpdate = null;
        String xAccessToken = null;
        String xSecretToken = null;
        String authorization = null;
        String ehelplyActiveParticipant = null;
        String ehelplyProject = null;
        String ehelplyData = null;
        ProjectsUsageTypeDB response = api.updateUsageType(usageTypeKey, projectsUsageTypeUpdate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        // TODO: test validations
    }

}
