/*
 * eHelply SDK - 1.1.89
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.89
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetAppointment403Response;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.ResponseCreatekey;
import org.openapitools.client.model.ResponseDeletekey;
import org.openapitools.client.model.ResponseGeneratetoken;
import org.openapitools.client.model.SecurityCreateToken;
import org.openapitools.client.model.SecurityEncryptionKeyGet;
import org.openapitools.client.model.SecurityEncryptionKeyResponse;
import org.openapitools.client.model.SecurityKeyCreate;
import org.openapitools.client.model.SecurityKeyGet;
import org.openapitools.client.model.SecurityKeyVerify;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SecurityApi
 */
@Disabled
public class SecurityApiTest {

    private final SecurityApi api = new SecurityApi();

    /**
     * Createencryptionkey
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEncryptionKeyTest() throws ApiException {
        String category = null;
        String ehelplySecuritySecretKey = null;
        SecurityEncryptionKeyResponse response = api.createEncryptionKey(category, ehelplySecuritySecretKey);
        // TODO: test validations
    }

    /**
     * Createkey
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createKeyTest() throws ApiException {
        SecurityKeyCreate securityKeyCreate = null;
        Integer accessLength = null;
        Integer secretLength = null;
        ResponseCreatekey response = api.createKey(securityKeyCreate, accessLength, secretLength);
        // TODO: test validations
    }

    /**
     * Deletekey
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteKeyTest() throws ApiException {
        String keyUuid = null;
        ResponseDeletekey response = api.deleteKey(keyUuid);
        // TODO: test validations
    }

    /**
     * Generatetoken
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateTokenTest() throws ApiException {
        SecurityCreateToken securityCreateToken = null;
        ResponseGeneratetoken response = api.generateToken(securityCreateToken);
        // TODO: test validations
    }

    /**
     * Getencryptionkey
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEncryptionKeyTest() throws ApiException {
        String category = null;
        String ehelplySecuritySecretKey = null;
        List<SecurityEncryptionKeyGet> response = api.getEncryptionKey(category, ehelplySecuritySecretKey);
        // TODO: test validations
    }

    /**
     * Getkey
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getKeyTest() throws ApiException {
        String keyUuid = null;
        SecurityKeyGet response = api.getKey(keyUuid);
        // TODO: test validations
    }

    /**
     * Searchkeys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchKeysTest() throws ApiException {
        List<SecurityKeyGet> response = api.searchKeys();
        // TODO: test validations
    }

    /**
     * Verifykey
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyKeyTest() throws ApiException {
        SecurityKeyVerify securityKeyVerify = null;
        SecurityKeyGet response = api.verifyKey(securityKeyVerify);
        // TODO: test validations
    }

}
