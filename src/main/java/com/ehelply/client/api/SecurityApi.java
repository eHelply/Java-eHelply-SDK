/*
 * eHelply SDK - 1.1.105
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.105
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ehelply.client.api;

import com.ehelply.client.ApiCallback;
import com.ehelply.client.ApiClient;
import com.ehelply.client.ApiException;
import com.ehelply.client.ApiResponse;
import com.ehelply.client.Configuration;
import com.ehelply.client.Pair;
import com.ehelply.client.ProgressRequestBody;
import com.ehelply.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ehelply.client.model.GetServicesWithSpecs403Response;
import com.ehelply.client.model.HTTPValidationError;
import com.ehelply.client.model.ResponseCreatekey;
import com.ehelply.client.model.ResponseDeletekey;
import com.ehelply.client.model.ResponseGeneratetoken;
import com.ehelply.client.model.SecurityCreateToken;
import com.ehelply.client.model.SecurityEncryptionKeyGet;
import com.ehelply.client.model.SecurityEncryptionKeyResponse;
import com.ehelply.client.model.SecurityKeyCreate;
import com.ehelply.client.model.SecurityKeyGet;
import com.ehelply.client.model.SecurityKeyVerify;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SecurityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecurityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecurityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createEncryptionKey
     * @param category  (required)
     * @param ehelplySecuritySecretKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEncryptionKeyCall(String category, String ehelplySecuritySecretKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/security/encryption/categories/{category}/keys"
            .replaceAll("\\{" + "category" + "\\}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ehelplySecuritySecretKey != null) {
            localVarHeaderParams.put("ehelply-security-secret-key", localVarApiClient.parameterToString(ehelplySecuritySecretKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEncryptionKeyValidateBeforeCall(String category, String ehelplySecuritySecretKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling createEncryptionKey(Async)");
        }
        

        okhttp3.Call localVarCall = createEncryptionKeyCall(category, ehelplySecuritySecretKey, _callback);
        return localVarCall;

    }

    /**
     * Createencryptionkey
     * 
     * @param category  (required)
     * @param ehelplySecuritySecretKey  (optional)
     * @return SecurityEncryptionKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SecurityEncryptionKeyResponse createEncryptionKey(String category, String ehelplySecuritySecretKey) throws ApiException {
        ApiResponse<SecurityEncryptionKeyResponse> localVarResp = createEncryptionKeyWithHttpInfo(category, ehelplySecuritySecretKey);
        return localVarResp.getData();
    }

    /**
     * Createencryptionkey
     * 
     * @param category  (required)
     * @param ehelplySecuritySecretKey  (optional)
     * @return ApiResponse&lt;SecurityEncryptionKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityEncryptionKeyResponse> createEncryptionKeyWithHttpInfo(String category, String ehelplySecuritySecretKey) throws ApiException {
        okhttp3.Call localVarCall = createEncryptionKeyValidateBeforeCall(category, ehelplySecuritySecretKey, null);
        Type localVarReturnType = new TypeToken<SecurityEncryptionKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Createencryptionkey (asynchronously)
     * 
     * @param category  (required)
     * @param ehelplySecuritySecretKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEncryptionKeyAsync(String category, String ehelplySecuritySecretKey, final ApiCallback<SecurityEncryptionKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEncryptionKeyValidateBeforeCall(category, ehelplySecuritySecretKey, _callback);
        Type localVarReturnType = new TypeToken<SecurityEncryptionKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createKey
     * @param securityKeyCreate  (required)
     * @param accessLength  (optional, default to 64)
     * @param secretLength  (optional, default to 64)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Access token and secret token lengths must be greater than 48 characters and less than 1024 characters to guarantee adequate security.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKeyCall(SecurityKeyCreate securityKeyCreate, Integer accessLength, Integer secretLength, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityKeyCreate;

        // create path and map variables
        String localVarPath = "/sam/security/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_length", accessLength));
        }

        if (secretLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret_length", secretLength));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createKeyValidateBeforeCall(SecurityKeyCreate securityKeyCreate, Integer accessLength, Integer secretLength, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'securityKeyCreate' is set
        if (securityKeyCreate == null) {
            throw new ApiException("Missing the required parameter 'securityKeyCreate' when calling createKey(Async)");
        }
        

        okhttp3.Call localVarCall = createKeyCall(securityKeyCreate, accessLength, secretLength, _callback);
        return localVarCall;

    }

    /**
     * Createkey
     * 
     * @param securityKeyCreate  (required)
     * @param accessLength  (optional, default to 64)
     * @param secretLength  (optional, default to 64)
     * @return ResponseCreatekey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Access token and secret token lengths must be greater than 48 characters and less than 1024 characters to guarantee adequate security.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseCreatekey createKey(SecurityKeyCreate securityKeyCreate, Integer accessLength, Integer secretLength) throws ApiException {
        ApiResponse<ResponseCreatekey> localVarResp = createKeyWithHttpInfo(securityKeyCreate, accessLength, secretLength);
        return localVarResp.getData();
    }

    /**
     * Createkey
     * 
     * @param securityKeyCreate  (required)
     * @param accessLength  (optional, default to 64)
     * @param secretLength  (optional, default to 64)
     * @return ApiResponse&lt;ResponseCreatekey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Access token and secret token lengths must be greater than 48 characters and less than 1024 characters to guarantee adequate security.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseCreatekey> createKeyWithHttpInfo(SecurityKeyCreate securityKeyCreate, Integer accessLength, Integer secretLength) throws ApiException {
        okhttp3.Call localVarCall = createKeyValidateBeforeCall(securityKeyCreate, accessLength, secretLength, null);
        Type localVarReturnType = new TypeToken<ResponseCreatekey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Createkey (asynchronously)
     * 
     * @param securityKeyCreate  (required)
     * @param accessLength  (optional, default to 64)
     * @param secretLength  (optional, default to 64)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Access token and secret token lengths must be greater than 48 characters and less than 1024 characters to guarantee adequate security.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKeyAsync(SecurityKeyCreate securityKeyCreate, Integer accessLength, Integer secretLength, final ApiCallback<ResponseCreatekey> _callback) throws ApiException {

        okhttp3.Call localVarCall = createKeyValidateBeforeCall(securityKeyCreate, accessLength, secretLength, _callback);
        Type localVarReturnType = new TypeToken<ResponseCreatekey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteKey
     * @param keyUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeyCall(String keyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/security/keys/{key_uuid}"
            .replaceAll("\\{" + "key_uuid" + "\\}", localVarApiClient.escapeString(keyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteKeyValidateBeforeCall(String keyUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyUuid' is set
        if (keyUuid == null) {
            throw new ApiException("Missing the required parameter 'keyUuid' when calling deleteKey(Async)");
        }
        

        okhttp3.Call localVarCall = deleteKeyCall(keyUuid, _callback);
        return localVarCall;

    }

    /**
     * Deletekey
     * 
     * @param keyUuid  (required)
     * @return ResponseDeletekey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseDeletekey deleteKey(String keyUuid) throws ApiException {
        ApiResponse<ResponseDeletekey> localVarResp = deleteKeyWithHttpInfo(keyUuid);
        return localVarResp.getData();
    }

    /**
     * Deletekey
     * 
     * @param keyUuid  (required)
     * @return ApiResponse&lt;ResponseDeletekey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseDeletekey> deleteKeyWithHttpInfo(String keyUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteKeyValidateBeforeCall(keyUuid, null);
        Type localVarReturnType = new TypeToken<ResponseDeletekey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletekey (asynchronously)
     * 
     * @param keyUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeyAsync(String keyUuid, final ApiCallback<ResponseDeletekey> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteKeyValidateBeforeCall(keyUuid, _callback);
        Type localVarReturnType = new TypeToken<ResponseDeletekey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateToken
     * @param securityCreateToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTokenCall(SecurityCreateToken securityCreateToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityCreateToken;

        // create path and map variables
        String localVarPath = "/sam/security/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTokenValidateBeforeCall(SecurityCreateToken securityCreateToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'securityCreateToken' is set
        if (securityCreateToken == null) {
            throw new ApiException("Missing the required parameter 'securityCreateToken' when calling generateToken(Async)");
        }
        

        okhttp3.Call localVarCall = generateTokenCall(securityCreateToken, _callback);
        return localVarCall;

    }

    /**
     * Generatetoken
     * 
     * @param securityCreateToken  (required)
     * @return ResponseGeneratetoken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseGeneratetoken generateToken(SecurityCreateToken securityCreateToken) throws ApiException {
        ApiResponse<ResponseGeneratetoken> localVarResp = generateTokenWithHttpInfo(securityCreateToken);
        return localVarResp.getData();
    }

    /**
     * Generatetoken
     * 
     * @param securityCreateToken  (required)
     * @return ApiResponse&lt;ResponseGeneratetoken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseGeneratetoken> generateTokenWithHttpInfo(SecurityCreateToken securityCreateToken) throws ApiException {
        okhttp3.Call localVarCall = generateTokenValidateBeforeCall(securityCreateToken, null);
        Type localVarReturnType = new TypeToken<ResponseGeneratetoken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generatetoken (asynchronously)
     * 
     * @param securityCreateToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTokenAsync(SecurityCreateToken securityCreateToken, final ApiCallback<ResponseGeneratetoken> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTokenValidateBeforeCall(securityCreateToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseGeneratetoken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEncryptionKey
     * @param category  (required)
     * @param ehelplySecuritySecretKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEncryptionKeyCall(String category, String ehelplySecuritySecretKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/security/encryption/categories/{category}/keys"
            .replaceAll("\\{" + "category" + "\\}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ehelplySecuritySecretKey != null) {
            localVarHeaderParams.put("ehelply-security-secret-key", localVarApiClient.parameterToString(ehelplySecuritySecretKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEncryptionKeyValidateBeforeCall(String category, String ehelplySecuritySecretKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling getEncryptionKey(Async)");
        }
        

        okhttp3.Call localVarCall = getEncryptionKeyCall(category, ehelplySecuritySecretKey, _callback);
        return localVarCall;

    }

    /**
     * Getencryptionkey
     * 
     * @param category  (required)
     * @param ehelplySecuritySecretKey  (optional)
     * @return List&lt;SecurityEncryptionKeyGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<SecurityEncryptionKeyGet> getEncryptionKey(String category, String ehelplySecuritySecretKey) throws ApiException {
        ApiResponse<List<SecurityEncryptionKeyGet>> localVarResp = getEncryptionKeyWithHttpInfo(category, ehelplySecuritySecretKey);
        return localVarResp.getData();
    }

    /**
     * Getencryptionkey
     * 
     * @param category  (required)
     * @param ehelplySecuritySecretKey  (optional)
     * @return ApiResponse&lt;List&lt;SecurityEncryptionKeyGet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SecurityEncryptionKeyGet>> getEncryptionKeyWithHttpInfo(String category, String ehelplySecuritySecretKey) throws ApiException {
        okhttp3.Call localVarCall = getEncryptionKeyValidateBeforeCall(category, ehelplySecuritySecretKey, null);
        Type localVarReturnType = new TypeToken<List<SecurityEncryptionKeyGet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getencryptionkey (asynchronously)
     * 
     * @param category  (required)
     * @param ehelplySecuritySecretKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEncryptionKeyAsync(String category, String ehelplySecuritySecretKey, final ApiCallback<List<SecurityEncryptionKeyGet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEncryptionKeyValidateBeforeCall(category, ehelplySecuritySecretKey, _callback);
        Type localVarReturnType = new TypeToken<List<SecurityEncryptionKeyGet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKey
     * @param keyUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyCall(String keyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/security/keys/{key_uuid}"
            .replaceAll("\\{" + "key_uuid" + "\\}", localVarApiClient.escapeString(keyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyValidateBeforeCall(String keyUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyUuid' is set
        if (keyUuid == null) {
            throw new ApiException("Missing the required parameter 'keyUuid' when calling getKey(Async)");
        }
        

        okhttp3.Call localVarCall = getKeyCall(keyUuid, _callback);
        return localVarCall;

    }

    /**
     * Getkey
     * 
     * @param keyUuid  (required)
     * @return SecurityKeyGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SecurityKeyGet getKey(String keyUuid) throws ApiException {
        ApiResponse<SecurityKeyGet> localVarResp = getKeyWithHttpInfo(keyUuid);
        return localVarResp.getData();
    }

    /**
     * Getkey
     * 
     * @param keyUuid  (required)
     * @return ApiResponse&lt;SecurityKeyGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityKeyGet> getKeyWithHttpInfo(String keyUuid) throws ApiException {
        okhttp3.Call localVarCall = getKeyValidateBeforeCall(keyUuid, null);
        Type localVarReturnType = new TypeToken<SecurityKeyGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getkey (asynchronously)
     * 
     * @param keyUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyAsync(String keyUuid, final ApiCallback<SecurityKeyGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyValidateBeforeCall(keyUuid, _callback);
        Type localVarReturnType = new TypeToken<SecurityKeyGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchKeys
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchKeysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/security/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchKeysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchKeysCall(_callback);
        return localVarCall;

    }

    /**
     * Searchkeys
     * 
     * @return List&lt;SecurityKeyGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<SecurityKeyGet> searchKeys() throws ApiException {
        ApiResponse<List<SecurityKeyGet>> localVarResp = searchKeysWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Searchkeys
     * 
     * @return ApiResponse&lt;List&lt;SecurityKeyGet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SecurityKeyGet>> searchKeysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = searchKeysValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SecurityKeyGet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searchkeys (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchKeysAsync(final ApiCallback<List<SecurityKeyGet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchKeysValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SecurityKeyGet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyKey
     * @param securityKeyVerify  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Access token and secret token lengths must be greater than 48 characters and less than 1024 characters to guarantee adequate security.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyKeyCall(SecurityKeyVerify securityKeyVerify, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityKeyVerify;

        // create path and map variables
        String localVarPath = "/sam/security/keys/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyKeyValidateBeforeCall(SecurityKeyVerify securityKeyVerify, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'securityKeyVerify' is set
        if (securityKeyVerify == null) {
            throw new ApiException("Missing the required parameter 'securityKeyVerify' when calling verifyKey(Async)");
        }
        

        okhttp3.Call localVarCall = verifyKeyCall(securityKeyVerify, _callback);
        return localVarCall;

    }

    /**
     * Verifykey
     * 
     * @param securityKeyVerify  (required)
     * @return SecurityKeyGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Access token and secret token lengths must be greater than 48 characters and less than 1024 characters to guarantee adequate security.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public SecurityKeyGet verifyKey(SecurityKeyVerify securityKeyVerify) throws ApiException {
        ApiResponse<SecurityKeyGet> localVarResp = verifyKeyWithHttpInfo(securityKeyVerify);
        return localVarResp.getData();
    }

    /**
     * Verifykey
     * 
     * @param securityKeyVerify  (required)
     * @return ApiResponse&lt;SecurityKeyGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Access token and secret token lengths must be greater than 48 characters and less than 1024 characters to guarantee adequate security.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityKeyGet> verifyKeyWithHttpInfo(SecurityKeyVerify securityKeyVerify) throws ApiException {
        okhttp3.Call localVarCall = verifyKeyValidateBeforeCall(securityKeyVerify, null);
        Type localVarReturnType = new TypeToken<SecurityKeyGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifykey (asynchronously)
     * 
     * @param securityKeyVerify  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Access token and secret token lengths must be greater than 48 characters and less than 1024 characters to guarantee adequate security.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyKeyAsync(SecurityKeyVerify securityKeyVerify, final ApiCallback<SecurityKeyGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyKeyValidateBeforeCall(securityKeyVerify, _callback);
        Type localVarReturnType = new TypeToken<SecurityKeyGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
