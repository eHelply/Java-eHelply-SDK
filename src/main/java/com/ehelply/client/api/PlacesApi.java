/*
 * eHelply SDK - 1.1.96
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.96
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ehelply.client.api;

import com.ehelply.client.ApiCallback;
import com.ehelply.client.ApiClient;
import com.ehelply.client.ApiException;
import com.ehelply.client.ApiResponse;
import com.ehelply.client.Configuration;
import com.ehelply.client.Pair;
import com.ehelply.client.ProgressRequestBody;
import com.ehelply.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.ehelply.client.model.HTTPValidationError;
import com.ehelply.client.model.Page;
import com.ehelply.client.model.PlaceBase;
import com.ehelply.client.model.PlaceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PlacesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPlacePlacesPlacesPost
     * @param placeBase  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPlacePlacesPlacesPostCall(PlaceBase placeBase, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = placeBase;

        // create path and map variables
        String localVarPath = "/places/places";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPlacePlacesPlacesPostValidateBeforeCall(PlaceBase placeBase, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'placeBase' is set
        if (placeBase == null) {
            throw new ApiException("Missing the required parameter 'placeBase' when calling createPlacePlacesPlacesPost(Async)");
        }
        

        okhttp3.Call localVarCall = createPlacePlacesPlacesPostCall(placeBase, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Create Place
     * Creates a Place.
     * @param placeBase  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return PlaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public PlaceResponse createPlacePlacesPlacesPost(PlaceBase placeBase, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<PlaceResponse> localVarResp = createPlacePlacesPlacesPostWithHttpInfo(placeBase, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Create Place
     * Creates a Place.
     * @param placeBase  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;PlaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaceResponse> createPlacePlacesPlacesPostWithHttpInfo(PlaceBase placeBase, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = createPlacePlacesPlacesPostValidateBeforeCall(placeBase, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<PlaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Place (asynchronously)
     * Creates a Place.
     * @param placeBase  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPlacePlacesPlacesPostAsync(PlaceBase placeBase, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<PlaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPlacePlacesPlacesPostValidateBeforeCall(placeBase, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<PlaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePlacePlacesPlacesPlaceUuidDelete
     * @param placeUuid  (required)
     * @param softDelete  (optional, default to true)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePlacePlacesPlacesPlaceUuidDeleteCall(String placeUuid, Boolean softDelete, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/places/{place_uuid}"
            .replaceAll("\\{" + "place_uuid" + "\\}", localVarApiClient.escapeString(placeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (softDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("soft_delete", softDelete));
        }

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePlacePlacesPlacesPlaceUuidDeleteValidateBeforeCall(String placeUuid, Boolean softDelete, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'placeUuid' is set
        if (placeUuid == null) {
            throw new ApiException("Missing the required parameter 'placeUuid' when calling deletePlacePlacesPlacesPlaceUuidDelete(Async)");
        }
        

        okhttp3.Call localVarCall = deletePlacePlacesPlacesPlaceUuidDeleteCall(placeUuid, softDelete, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Delete Place
     * Deletes the place with the given ID and returns True if successful
     * @param placeUuid  (required)
     * @param softDelete  (optional, default to true)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deletePlacePlacesPlacesPlaceUuidDelete(String placeUuid, Boolean softDelete, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<Object> localVarResp = deletePlacePlacesPlacesPlaceUuidDeleteWithHttpInfo(placeUuid, softDelete, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Delete Place
     * Deletes the place with the given ID and returns True if successful
     * @param placeUuid  (required)
     * @param softDelete  (optional, default to true)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deletePlacePlacesPlacesPlaceUuidDeleteWithHttpInfo(String placeUuid, Boolean softDelete, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = deletePlacePlacesPlacesPlaceUuidDeleteValidateBeforeCall(placeUuid, softDelete, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Place (asynchronously)
     * Deletes the place with the given ID and returns True if successful
     * @param placeUuid  (required)
     * @param softDelete  (optional, default to true)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePlacePlacesPlacesPlaceUuidDeleteAsync(String placeUuid, Boolean softDelete, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePlacePlacesPlacesPlaceUuidDeleteValidateBeforeCall(placeUuid, softDelete, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forwardGeocodingPlacesGeocodingForwardGet
     * @param searchingPlace  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forwardGeocodingPlacesGeocodingForwardGetCall(String searchingPlace, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/geocoding/forward";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchingPlace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searching_place", searchingPlace));
        }

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forwardGeocodingPlacesGeocodingForwardGetValidateBeforeCall(String searchingPlace, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'searchingPlace' is set
        if (searchingPlace == null) {
            throw new ApiException("Missing the required parameter 'searchingPlace' when calling forwardGeocodingPlacesGeocodingForwardGet(Async)");
        }
        

        okhttp3.Call localVarCall = forwardGeocodingPlacesGeocodingForwardGetCall(searchingPlace, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Forward Geocoding
     * 
     * @param searchingPlace  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object forwardGeocodingPlacesGeocodingForwardGet(String searchingPlace, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<Object> localVarResp = forwardGeocodingPlacesGeocodingForwardGetWithHttpInfo(searchingPlace, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Forward Geocoding
     * 
     * @param searchingPlace  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> forwardGeocodingPlacesGeocodingForwardGetWithHttpInfo(String searchingPlace, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = forwardGeocodingPlacesGeocodingForwardGetValidateBeforeCall(searchingPlace, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Forward Geocoding (asynchronously)
     * 
     * @param searchingPlace  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forwardGeocodingPlacesGeocodingForwardGetAsync(String searchingPlace, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = forwardGeocodingPlacesGeocodingForwardGetValidateBeforeCall(searchingPlace, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlacePlacesPlacesPlaceUuidGet
     * @param placeUuid  (required)
     * @param withMeta  (optional, default to false)
     * @param withCatalog  (optional, default to false)
     * @param withReviews  (optional, default to false)
     * @param withSchedule  (optional, default to false)
     * @param withCollection  (optional, default to false)
     * @param withBlog  (optional, default to false)
     * @param withTags  (optional, default to false)
     * @param withCategories  (optional, default to false)
     * @param withCompany  (optional, default to false)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlacePlacesPlacesPlaceUuidGetCall(String placeUuid, Boolean withMeta, Boolean withCatalog, Boolean withReviews, Boolean withSchedule, Boolean withCollection, Boolean withBlog, Boolean withTags, Boolean withCategories, Boolean withCompany, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/places/{place_uuid}"
            .replaceAll("\\{" + "place_uuid" + "\\}", localVarApiClient.escapeString(placeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withMeta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_meta", withMeta));
        }

        if (withCatalog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_catalog", withCatalog));
        }

        if (withReviews != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_reviews", withReviews));
        }

        if (withSchedule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_schedule", withSchedule));
        }

        if (withCollection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_collection", withCollection));
        }

        if (withBlog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_blog", withBlog));
        }

        if (withTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_tags", withTags));
        }

        if (withCategories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_categories", withCategories));
        }

        if (withCompany != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_company", withCompany));
        }

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlacePlacesPlacesPlaceUuidGetValidateBeforeCall(String placeUuid, Boolean withMeta, Boolean withCatalog, Boolean withReviews, Boolean withSchedule, Boolean withCollection, Boolean withBlog, Boolean withTags, Boolean withCategories, Boolean withCompany, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'placeUuid' is set
        if (placeUuid == null) {
            throw new ApiException("Missing the required parameter 'placeUuid' when calling getPlacePlacesPlacesPlaceUuidGet(Async)");
        }
        

        okhttp3.Call localVarCall = getPlacePlacesPlacesPlaceUuidGetCall(placeUuid, withMeta, withCatalog, withReviews, withSchedule, withCollection, withBlog, withTags, withCategories, withCompany, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Get Place
     * Gets the place information given the Place ID
     * @param placeUuid  (required)
     * @param withMeta  (optional, default to false)
     * @param withCatalog  (optional, default to false)
     * @param withReviews  (optional, default to false)
     * @param withSchedule  (optional, default to false)
     * @param withCollection  (optional, default to false)
     * @param withBlog  (optional, default to false)
     * @param withTags  (optional, default to false)
     * @param withCategories  (optional, default to false)
     * @param withCompany  (optional, default to false)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return PlaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public PlaceResponse getPlacePlacesPlacesPlaceUuidGet(String placeUuid, Boolean withMeta, Boolean withCatalog, Boolean withReviews, Boolean withSchedule, Boolean withCollection, Boolean withBlog, Boolean withTags, Boolean withCategories, Boolean withCompany, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<PlaceResponse> localVarResp = getPlacePlacesPlacesPlaceUuidGetWithHttpInfo(placeUuid, withMeta, withCatalog, withReviews, withSchedule, withCollection, withBlog, withTags, withCategories, withCompany, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Get Place
     * Gets the place information given the Place ID
     * @param placeUuid  (required)
     * @param withMeta  (optional, default to false)
     * @param withCatalog  (optional, default to false)
     * @param withReviews  (optional, default to false)
     * @param withSchedule  (optional, default to false)
     * @param withCollection  (optional, default to false)
     * @param withBlog  (optional, default to false)
     * @param withTags  (optional, default to false)
     * @param withCategories  (optional, default to false)
     * @param withCompany  (optional, default to false)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;PlaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaceResponse> getPlacePlacesPlacesPlaceUuidGetWithHttpInfo(String placeUuid, Boolean withMeta, Boolean withCatalog, Boolean withReviews, Boolean withSchedule, Boolean withCollection, Boolean withBlog, Boolean withTags, Boolean withCategories, Boolean withCompany, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = getPlacePlacesPlacesPlaceUuidGetValidateBeforeCall(placeUuid, withMeta, withCatalog, withReviews, withSchedule, withCollection, withBlog, withTags, withCategories, withCompany, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<PlaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Place (asynchronously)
     * Gets the place information given the Place ID
     * @param placeUuid  (required)
     * @param withMeta  (optional, default to false)
     * @param withCatalog  (optional, default to false)
     * @param withReviews  (optional, default to false)
     * @param withSchedule  (optional, default to false)
     * @param withCollection  (optional, default to false)
     * @param withBlog  (optional, default to false)
     * @param withTags  (optional, default to false)
     * @param withCategories  (optional, default to false)
     * @param withCompany  (optional, default to false)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlacePlacesPlacesPlaceUuidGetAsync(String placeUuid, Boolean withMeta, Boolean withCatalog, Boolean withReviews, Boolean withSchedule, Boolean withCollection, Boolean withBlog, Boolean withTags, Boolean withCategories, Boolean withCompany, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<PlaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlacePlacesPlacesPlaceUuidGetValidateBeforeCall(placeUuid, withMeta, withCatalog, withReviews, withSchedule, withCollection, withBlog, withTags, withCategories, withCompany, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<PlaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reverseGeocodingPlacesGeocodingReverseGet
     * @param _long  (required)
     * @param lat  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reverseGeocodingPlacesGeocodingReverseGetCall(BigDecimal _long, BigDecimal lat, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/geocoding/reverse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_long != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("long", _long));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reverseGeocodingPlacesGeocodingReverseGetValidateBeforeCall(BigDecimal _long, BigDecimal lat, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter '_long' is set
        if (_long == null) {
            throw new ApiException("Missing the required parameter '_long' when calling reverseGeocodingPlacesGeocodingReverseGet(Async)");
        }
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling reverseGeocodingPlacesGeocodingReverseGet(Async)");
        }
        

        okhttp3.Call localVarCall = reverseGeocodingPlacesGeocodingReverseGetCall(_long, lat, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Reverse Geocoding
     * 
     * @param _long  (required)
     * @param lat  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object reverseGeocodingPlacesGeocodingReverseGet(BigDecimal _long, BigDecimal lat, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<Object> localVarResp = reverseGeocodingPlacesGeocodingReverseGetWithHttpInfo(_long, lat, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Reverse Geocoding
     * 
     * @param _long  (required)
     * @param lat  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> reverseGeocodingPlacesGeocodingReverseGetWithHttpInfo(BigDecimal _long, BigDecimal lat, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = reverseGeocodingPlacesGeocodingReverseGetValidateBeforeCall(_long, lat, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reverse Geocoding (asynchronously)
     * 
     * @param _long  (required)
     * @param lat  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reverseGeocodingPlacesGeocodingReverseGetAsync(BigDecimal _long, BigDecimal lat, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = reverseGeocodingPlacesGeocodingReverseGetValidateBeforeCall(_long, lat, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchPlacesBySearchStringPlacesSearchPlacesStringGet
     * @param searchString  (optional, default to )
     * @param page  (optional, default to 1)
     * @param pageSize  (optional, default to 25)
     * @param sortOn  (optional)
     * @param sortDesc  (optional, default to false)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPlacesBySearchStringPlacesSearchPlacesStringGetCall(String searchString, Integer page, Integer pageSize, String sortOn, Boolean sortDesc, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/search/places/string";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_string", searchString));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (sortOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_on", sortOn));
        }

        if (sortDesc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_desc", sortDesc));
        }

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPlacesBySearchStringPlacesSearchPlacesStringGetValidateBeforeCall(String searchString, Integer page, Integer pageSize, String sortOn, Boolean sortDesc, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchPlacesBySearchStringPlacesSearchPlacesStringGetCall(searchString, page, pageSize, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Search Places By Search String
     * Search places by a search string
     * @param searchString  (optional, default to )
     * @param page  (optional, default to 1)
     * @param pageSize  (optional, default to 25)
     * @param sortOn  (optional)
     * @param sortDesc  (optional, default to false)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return Page
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Page searchPlacesBySearchStringPlacesSearchPlacesStringGet(String searchString, Integer page, Integer pageSize, String sortOn, Boolean sortDesc, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<Page> localVarResp = searchPlacesBySearchStringPlacesSearchPlacesStringGetWithHttpInfo(searchString, page, pageSize, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Search Places By Search String
     * Search places by a search string
     * @param searchString  (optional, default to )
     * @param page  (optional, default to 1)
     * @param pageSize  (optional, default to 25)
     * @param sortOn  (optional)
     * @param sortDesc  (optional, default to false)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;Page&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Page> searchPlacesBySearchStringPlacesSearchPlacesStringGetWithHttpInfo(String searchString, Integer page, Integer pageSize, String sortOn, Boolean sortDesc, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = searchPlacesBySearchStringPlacesSearchPlacesStringGetValidateBeforeCall(searchString, page, pageSize, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Places By Search String (asynchronously)
     * Search places by a search string
     * @param searchString  (optional, default to )
     * @param page  (optional, default to 1)
     * @param pageSize  (optional, default to 25)
     * @param sortOn  (optional)
     * @param sortDesc  (optional, default to false)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPlacesBySearchStringPlacesSearchPlacesStringGetAsync(String searchString, Integer page, Integer pageSize, String sortOn, Boolean sortDesc, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPlacesBySearchStringPlacesSearchPlacesStringGetValidateBeforeCall(searchString, page, pageSize, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchPlacesPlacesPlacesGet
     * @param projectUuid  (optional)
     * @param name  (optional)
     * @param addressLine1  (optional)
     * @param addressLine2  (optional)
     * @param city  (optional)
     * @param provinceState  (optional)
     * @param country  (optional)
     * @param postalZipCode  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @param email  (optional)
     * @param isPublic  (optional, default to true)
     * @param isDeleted  (optional, default to false)
     * @param withCompany  (optional, default to false)
     * @param withMeta  (optional, default to false)
     * @param withCatalog  (optional, default to false)
     * @param withReviews  (optional, default to false)
     * @param withSchedule  (optional, default to false)
     * @param withCollection  (optional, default to false)
     * @param withBlog  (optional, default to false)
     * @param withTags  (optional, default to false)
     * @param withCategories  (optional, default to false)
     * @param page  (optional, default to 1)
     * @param pageSize  (optional, default to 25)
     * @param sortOn  (optional)
     * @param sortDesc  (optional, default to false)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPlacesPlacesPlacesGetCall(String projectUuid, String name, String addressLine1, String addressLine2, String city, String provinceState, String country, String postalZipCode, String lat, String lng, String email, Boolean isPublic, Boolean isDeleted, Boolean withCompany, Boolean withMeta, Boolean withCatalog, Boolean withReviews, Boolean withSchedule, Boolean withCollection, Boolean withBlog, Boolean withTags, Boolean withCategories, Integer page, Integer pageSize, String sortOn, Boolean sortDesc, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/places";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project_uuid", projectUuid));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (addressLine1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address_line_1", addressLine1));
        }

        if (addressLine2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address_line_2", addressLine2));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (provinceState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("province_state", provinceState));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (postalZipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postal_zip_code", postalZipCode));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (isPublic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_public", isPublic));
        }

        if (isDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_deleted", isDeleted));
        }

        if (withCompany != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_company", withCompany));
        }

        if (withMeta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_meta", withMeta));
        }

        if (withCatalog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_catalog", withCatalog));
        }

        if (withReviews != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_reviews", withReviews));
        }

        if (withSchedule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_schedule", withSchedule));
        }

        if (withCollection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_collection", withCollection));
        }

        if (withBlog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_blog", withBlog));
        }

        if (withTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_tags", withTags));
        }

        if (withCategories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_categories", withCategories));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (sortOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_on", sortOn));
        }

        if (sortDesc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_desc", sortDesc));
        }

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPlacesPlacesPlacesGetValidateBeforeCall(String projectUuid, String name, String addressLine1, String addressLine2, String city, String provinceState, String country, String postalZipCode, String lat, String lng, String email, Boolean isPublic, Boolean isDeleted, Boolean withCompany, Boolean withMeta, Boolean withCatalog, Boolean withReviews, Boolean withSchedule, Boolean withCollection, Boolean withBlog, Boolean withTags, Boolean withCategories, Integer page, Integer pageSize, String sortOn, Boolean sortDesc, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchPlacesPlacesPlacesGetCall(projectUuid, name, addressLine1, addressLine2, city, provinceState, country, postalZipCode, lat, lng, email, isPublic, isDeleted, withCompany, withMeta, withCatalog, withReviews, withSchedule, withCollection, withBlog, withTags, withCategories, page, pageSize, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Search Places
     * Search all places and returns paginated results with Places being stored in items field. Can search by &#x60;project_uuid, name, address, address_line_2, city, province_state, country, postal_zip_code, lat, lng email&#x60; string fields or the &#x60;is_public and is_deleted&#x60; boolean fields. To search with these fields use query params with string values. For sorting fill out \&quot;sort_desc\&quot; field with either true/false and the \&quot;sort_on\&quot; query parameter with column you want to sort on (ex: name). Max pagination items per page is 50. Item return format: &#x60;&#x60;&#x60; {     uuid                                **type:** string     project_uuid                        **type:** string or None      meta_uuid                           **type:** string or None      catalog_data                        **type:** dict or None      review_group_data                   **type:** dict or None      schedule_data                       **type:** dict or None      collection_data                     **type:** dict or None      blog_data                           **type:** dict or None      tags                                **type:** [TagBase] or None      categories                          **type:** [CategoryBase] or None      company                             **type:** CompanyBase or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } &#x60;&#x60;&#x60;
     * @param projectUuid  (optional)
     * @param name  (optional)
     * @param addressLine1  (optional)
     * @param addressLine2  (optional)
     * @param city  (optional)
     * @param provinceState  (optional)
     * @param country  (optional)
     * @param postalZipCode  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @param email  (optional)
     * @param isPublic  (optional, default to true)
     * @param isDeleted  (optional, default to false)
     * @param withCompany  (optional, default to false)
     * @param withMeta  (optional, default to false)
     * @param withCatalog  (optional, default to false)
     * @param withReviews  (optional, default to false)
     * @param withSchedule  (optional, default to false)
     * @param withCollection  (optional, default to false)
     * @param withBlog  (optional, default to false)
     * @param withTags  (optional, default to false)
     * @param withCategories  (optional, default to false)
     * @param page  (optional, default to 1)
     * @param pageSize  (optional, default to 25)
     * @param sortOn  (optional)
     * @param sortDesc  (optional, default to false)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return Page
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Page searchPlacesPlacesPlacesGet(String projectUuid, String name, String addressLine1, String addressLine2, String city, String provinceState, String country, String postalZipCode, String lat, String lng, String email, Boolean isPublic, Boolean isDeleted, Boolean withCompany, Boolean withMeta, Boolean withCatalog, Boolean withReviews, Boolean withSchedule, Boolean withCollection, Boolean withBlog, Boolean withTags, Boolean withCategories, Integer page, Integer pageSize, String sortOn, Boolean sortDesc, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<Page> localVarResp = searchPlacesPlacesPlacesGetWithHttpInfo(projectUuid, name, addressLine1, addressLine2, city, provinceState, country, postalZipCode, lat, lng, email, isPublic, isDeleted, withCompany, withMeta, withCatalog, withReviews, withSchedule, withCollection, withBlog, withTags, withCategories, page, pageSize, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Search Places
     * Search all places and returns paginated results with Places being stored in items field. Can search by &#x60;project_uuid, name, address, address_line_2, city, province_state, country, postal_zip_code, lat, lng email&#x60; string fields or the &#x60;is_public and is_deleted&#x60; boolean fields. To search with these fields use query params with string values. For sorting fill out \&quot;sort_desc\&quot; field with either true/false and the \&quot;sort_on\&quot; query parameter with column you want to sort on (ex: name). Max pagination items per page is 50. Item return format: &#x60;&#x60;&#x60; {     uuid                                **type:** string     project_uuid                        **type:** string or None      meta_uuid                           **type:** string or None      catalog_data                        **type:** dict or None      review_group_data                   **type:** dict or None      schedule_data                       **type:** dict or None      collection_data                     **type:** dict or None      blog_data                           **type:** dict or None      tags                                **type:** [TagBase] or None      categories                          **type:** [CategoryBase] or None      company                             **type:** CompanyBase or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } &#x60;&#x60;&#x60;
     * @param projectUuid  (optional)
     * @param name  (optional)
     * @param addressLine1  (optional)
     * @param addressLine2  (optional)
     * @param city  (optional)
     * @param provinceState  (optional)
     * @param country  (optional)
     * @param postalZipCode  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @param email  (optional)
     * @param isPublic  (optional, default to true)
     * @param isDeleted  (optional, default to false)
     * @param withCompany  (optional, default to false)
     * @param withMeta  (optional, default to false)
     * @param withCatalog  (optional, default to false)
     * @param withReviews  (optional, default to false)
     * @param withSchedule  (optional, default to false)
     * @param withCollection  (optional, default to false)
     * @param withBlog  (optional, default to false)
     * @param withTags  (optional, default to false)
     * @param withCategories  (optional, default to false)
     * @param page  (optional, default to 1)
     * @param pageSize  (optional, default to 25)
     * @param sortOn  (optional)
     * @param sortDesc  (optional, default to false)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;Page&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Page> searchPlacesPlacesPlacesGetWithHttpInfo(String projectUuid, String name, String addressLine1, String addressLine2, String city, String provinceState, String country, String postalZipCode, String lat, String lng, String email, Boolean isPublic, Boolean isDeleted, Boolean withCompany, Boolean withMeta, Boolean withCatalog, Boolean withReviews, Boolean withSchedule, Boolean withCollection, Boolean withBlog, Boolean withTags, Boolean withCategories, Integer page, Integer pageSize, String sortOn, Boolean sortDesc, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = searchPlacesPlacesPlacesGetValidateBeforeCall(projectUuid, name, addressLine1, addressLine2, city, provinceState, country, postalZipCode, lat, lng, email, isPublic, isDeleted, withCompany, withMeta, withCatalog, withReviews, withSchedule, withCollection, withBlog, withTags, withCategories, page, pageSize, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Places (asynchronously)
     * Search all places and returns paginated results with Places being stored in items field. Can search by &#x60;project_uuid, name, address, address_line_2, city, province_state, country, postal_zip_code, lat, lng email&#x60; string fields or the &#x60;is_public and is_deleted&#x60; boolean fields. To search with these fields use query params with string values. For sorting fill out \&quot;sort_desc\&quot; field with either true/false and the \&quot;sort_on\&quot; query parameter with column you want to sort on (ex: name). Max pagination items per page is 50. Item return format: &#x60;&#x60;&#x60; {     uuid                                **type:** string     project_uuid                        **type:** string or None      meta_uuid                           **type:** string or None      catalog_data                        **type:** dict or None      review_group_data                   **type:** dict or None      schedule_data                       **type:** dict or None      collection_data                     **type:** dict or None      blog_data                           **type:** dict or None      tags                                **type:** [TagBase] or None      categories                          **type:** [CategoryBase] or None      company                             **type:** CompanyBase or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } &#x60;&#x60;&#x60;
     * @param projectUuid  (optional)
     * @param name  (optional)
     * @param addressLine1  (optional)
     * @param addressLine2  (optional)
     * @param city  (optional)
     * @param provinceState  (optional)
     * @param country  (optional)
     * @param postalZipCode  (optional)
     * @param lat  (optional)
     * @param lng  (optional)
     * @param email  (optional)
     * @param isPublic  (optional, default to true)
     * @param isDeleted  (optional, default to false)
     * @param withCompany  (optional, default to false)
     * @param withMeta  (optional, default to false)
     * @param withCatalog  (optional, default to false)
     * @param withReviews  (optional, default to false)
     * @param withSchedule  (optional, default to false)
     * @param withCollection  (optional, default to false)
     * @param withBlog  (optional, default to false)
     * @param withTags  (optional, default to false)
     * @param withCategories  (optional, default to false)
     * @param page  (optional, default to 1)
     * @param pageSize  (optional, default to 25)
     * @param sortOn  (optional)
     * @param sortDesc  (optional, default to false)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPlacesPlacesPlacesGetAsync(String projectUuid, String name, String addressLine1, String addressLine2, String city, String provinceState, String country, String postalZipCode, String lat, String lng, String email, Boolean isPublic, Boolean isDeleted, Boolean withCompany, Boolean withMeta, Boolean withCatalog, Boolean withReviews, Boolean withSchedule, Boolean withCollection, Boolean withBlog, Boolean withTags, Boolean withCategories, Integer page, Integer pageSize, String sortOn, Boolean sortDesc, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPlacesPlacesPlacesGetValidateBeforeCall(projectUuid, name, addressLine1, addressLine2, city, provinceState, country, postalZipCode, lat, lng, email, isPublic, isDeleted, withCompany, withMeta, withCatalog, withReviews, withSchedule, withCollection, withBlog, withTags, withCategories, page, pageSize, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePlacePlacesPlacesPlaceUuidPut
     * @param placeUuid  (required)
     * @param placeBase  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePlacePlacesPlacesPlaceUuidPutCall(String placeUuid, PlaceBase placeBase, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = placeBase;

        // create path and map variables
        String localVarPath = "/places/places/{place_uuid}"
            .replaceAll("\\{" + "place_uuid" + "\\}", localVarApiClient.escapeString(placeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlacePlacesPlacesPlaceUuidPutValidateBeforeCall(String placeUuid, PlaceBase placeBase, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'placeUuid' is set
        if (placeUuid == null) {
            throw new ApiException("Missing the required parameter 'placeUuid' when calling updatePlacePlacesPlacesPlaceUuidPut(Async)");
        }
        
        // verify the required parameter 'placeBase' is set
        if (placeBase == null) {
            throw new ApiException("Missing the required parameter 'placeBase' when calling updatePlacePlacesPlacesPlaceUuidPut(Async)");
        }
        

        okhttp3.Call localVarCall = updatePlacePlacesPlacesPlaceUuidPutCall(placeUuid, placeBase, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Update Place
     * Update Place with given info, only updating the fields supplied. Place Uuid must be sent however.
     * @param placeUuid  (required)
     * @param placeBase  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return PlaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public PlaceResponse updatePlacePlacesPlacesPlaceUuidPut(String placeUuid, PlaceBase placeBase, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<PlaceResponse> localVarResp = updatePlacePlacesPlacesPlaceUuidPutWithHttpInfo(placeUuid, placeBase, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Update Place
     * Update Place with given info, only updating the fields supplied. Place Uuid must be sent however.
     * @param placeUuid  (required)
     * @param placeBase  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;PlaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaceResponse> updatePlacePlacesPlacesPlaceUuidPutWithHttpInfo(String placeUuid, PlaceBase placeBase, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = updatePlacePlacesPlacesPlaceUuidPutValidateBeforeCall(placeUuid, placeBase, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<PlaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Place (asynchronously)
     * Update Place with given info, only updating the fields supplied. Place Uuid must be sent however.
     * @param placeUuid  (required)
     * @param placeBase  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePlacePlacesPlacesPlaceUuidPutAsync(String placeUuid, PlaceBase placeBase, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<PlaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlacePlacesPlacesPlaceUuidPutValidateBeforeCall(placeUuid, placeBase, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<PlaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
