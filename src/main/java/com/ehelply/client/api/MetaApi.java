/*
 * eHelply SDK - 1.1.113
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.113
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ehelply.client.api;

import com.ehelply.client.ApiCallback;
import com.ehelply.client.ApiClient;
import com.ehelply.client.ApiException;
import com.ehelply.client.ApiResponse;
import com.ehelply.client.Configuration;
import com.ehelply.client.Pair;
import com.ehelply.client.ProgressRequestBody;
import com.ehelply.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ehelply.client.model.Field;
import com.ehelply.client.model.FieldDynamo;
import com.ehelply.client.model.HTTPValidationError;
import com.ehelply.client.model.MetaCreate;
import com.ehelply.client.model.MetaDynamo;
import com.ehelply.client.model.MetaGet;
import com.ehelply.client.model.MetaSlugger;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MetaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createField
     * @param field  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFieldCall(Field field, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/meta/field";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFieldValidateBeforeCall(Field field, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling createField(Async)");
        }
        

        okhttp3.Call localVarCall = createFieldCall(field, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Create Field
     * 
     * @param field  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return FieldDynamo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public FieldDynamo createField(Field field, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<FieldDynamo> localVarResp = createFieldWithHttpInfo(field, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Create Field
     * 
     * @param field  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;FieldDynamo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FieldDynamo> createFieldWithHttpInfo(Field field, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = createFieldValidateBeforeCall(field, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<FieldDynamo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Field (asynchronously)
     * 
     * @param field  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFieldAsync(Field field, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<FieldDynamo> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFieldValidateBeforeCall(field, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<FieldDynamo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMeta
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMetaCall(String service, String typeStr, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metaCreate;

        // create path and map variables
        String localVarPath = "/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "type_str" + "\\}", localVarApiClient.escapeString(typeStr.toString()))
            .replaceAll("\\{" + "entity_uuid" + "\\}", localVarApiClient.escapeString(entityUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMetaValidateBeforeCall(String service, String typeStr, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling createMeta(Async)");
        }
        
        // verify the required parameter 'typeStr' is set
        if (typeStr == null) {
            throw new ApiException("Missing the required parameter 'typeStr' when calling createMeta(Async)");
        }
        
        // verify the required parameter 'entityUuid' is set
        if (entityUuid == null) {
            throw new ApiException("Missing the required parameter 'entityUuid' when calling createMeta(Async)");
        }
        
        // verify the required parameter 'metaCreate' is set
        if (metaCreate == null) {
            throw new ApiException("Missing the required parameter 'metaCreate' when calling createMeta(Async)");
        }
        

        okhttp3.Call localVarCall = createMetaCall(service, typeStr, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Create Meta
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return MetaDynamo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public MetaDynamo createMeta(String service, String typeStr, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<MetaDynamo> localVarResp = createMetaWithHttpInfo(service, typeStr, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Create Meta
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;MetaDynamo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetaDynamo> createMetaWithHttpInfo(String service, String typeStr, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = createMetaValidateBeforeCall(service, typeStr, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<MetaDynamo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Meta (asynchronously)
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMetaAsync(String service, String typeStr, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<MetaDynamo> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMetaValidateBeforeCall(service, typeStr, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<MetaDynamo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteField
     * @param fieldUuid  (required)
     * @param softDelete  (optional, default to true)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldCall(String fieldUuid, Boolean softDelete, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meta/field/{field_uuid}"
            .replaceAll("\\{" + "field_uuid" + "\\}", localVarApiClient.escapeString(fieldUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (softDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("soft_delete", softDelete));
        }

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldValidateBeforeCall(String fieldUuid, Boolean softDelete, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fieldUuid' is set
        if (fieldUuid == null) {
            throw new ApiException("Missing the required parameter 'fieldUuid' when calling deleteField(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFieldCall(fieldUuid, softDelete, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Delete Field
     * 
     * @param fieldUuid  (required)
     * @param softDelete  (optional, default to true)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteField(String fieldUuid, Boolean softDelete, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<Object> localVarResp = deleteFieldWithHttpInfo(fieldUuid, softDelete, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Delete Field
     * 
     * @param fieldUuid  (required)
     * @param softDelete  (optional, default to true)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteFieldWithHttpInfo(String fieldUuid, Boolean softDelete, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldValidateBeforeCall(fieldUuid, softDelete, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Field (asynchronously)
     * 
     * @param fieldUuid  (required)
     * @param softDelete  (optional, default to true)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldAsync(String fieldUuid, Boolean softDelete, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldValidateBeforeCall(fieldUuid, softDelete, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMeta
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMetaCall(String service, String typeStr, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "type_str" + "\\}", localVarApiClient.escapeString(typeStr.toString()))
            .replaceAll("\\{" + "entity_uuid" + "\\}", localVarApiClient.escapeString(entityUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMetaValidateBeforeCall(String service, String typeStr, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling deleteMeta(Async)");
        }
        
        // verify the required parameter 'typeStr' is set
        if (typeStr == null) {
            throw new ApiException("Missing the required parameter 'typeStr' when calling deleteMeta(Async)");
        }
        
        // verify the required parameter 'entityUuid' is set
        if (entityUuid == null) {
            throw new ApiException("Missing the required parameter 'entityUuid' when calling deleteMeta(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMetaCall(service, typeStr, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Delete Meta
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteMeta(String service, String typeStr, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<Object> localVarResp = deleteMetaWithHttpInfo(service, typeStr, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Delete Meta
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteMetaWithHttpInfo(String service, String typeStr, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = deleteMetaValidateBeforeCall(service, typeStr, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Meta (asynchronously)
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMetaAsync(String service, String typeStr, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMetaValidateBeforeCall(service, typeStr, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMetaFromUuid
     * @param metaUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMetaFromUuidCall(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meta/meta/{meta_uuid}"
            .replaceAll("\\{" + "meta_uuid" + "\\}", localVarApiClient.escapeString(metaUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMetaFromUuidValidateBeforeCall(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'metaUuid' is set
        if (metaUuid == null) {
            throw new ApiException("Missing the required parameter 'metaUuid' when calling deleteMetaFromUuid(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMetaFromUuidCall(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Delete Meta From Uuid
     * 
     * @param metaUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteMetaFromUuid(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<Object> localVarResp = deleteMetaFromUuidWithHttpInfo(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Delete Meta From Uuid
     * 
     * @param metaUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteMetaFromUuidWithHttpInfo(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = deleteMetaFromUuidValidateBeforeCall(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Meta From Uuid (asynchronously)
     * 
     * @param metaUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMetaFromUuidAsync(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMetaFromUuidValidateBeforeCall(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getField
     * @param fieldUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldCall(String fieldUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meta/field/{field_uuid}"
            .replaceAll("\\{" + "field_uuid" + "\\}", localVarApiClient.escapeString(fieldUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldValidateBeforeCall(String fieldUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fieldUuid' is set
        if (fieldUuid == null) {
            throw new ApiException("Missing the required parameter 'fieldUuid' when calling getField(Async)");
        }
        

        okhttp3.Call localVarCall = getFieldCall(fieldUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Get Field
     * 
     * @param fieldUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return FieldDynamo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public FieldDynamo getField(String fieldUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<FieldDynamo> localVarResp = getFieldWithHttpInfo(fieldUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Get Field
     * 
     * @param fieldUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;FieldDynamo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FieldDynamo> getFieldWithHttpInfo(String fieldUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = getFieldValidateBeforeCall(fieldUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<FieldDynamo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Field (asynchronously)
     * 
     * @param fieldUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldAsync(String fieldUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<FieldDynamo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldValidateBeforeCall(fieldUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<FieldDynamo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeta
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param dates  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetaCall(String service, String typeStr, String entityUuid, Boolean detailed, Boolean custom, Boolean dates, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "type_str" + "\\}", localVarApiClient.escapeString(typeStr.toString()))
            .replaceAll("\\{" + "entity_uuid" + "\\}", localVarApiClient.escapeString(entityUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (detailed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailed", detailed));
        }

        if (custom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom", custom));
        }

        if (dates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dates", dates));
        }

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetaValidateBeforeCall(String service, String typeStr, String entityUuid, Boolean detailed, Boolean custom, Boolean dates, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getMeta(Async)");
        }
        
        // verify the required parameter 'typeStr' is set
        if (typeStr == null) {
            throw new ApiException("Missing the required parameter 'typeStr' when calling getMeta(Async)");
        }
        
        // verify the required parameter 'entityUuid' is set
        if (entityUuid == null) {
            throw new ApiException("Missing the required parameter 'entityUuid' when calling getMeta(Async)");
        }
        

        okhttp3.Call localVarCall = getMetaCall(service, typeStr, entityUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Get Meta
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param dates  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return MetaGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public MetaGet getMeta(String service, String typeStr, String entityUuid, Boolean detailed, Boolean custom, Boolean dates, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<MetaGet> localVarResp = getMetaWithHttpInfo(service, typeStr, entityUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Get Meta
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param dates  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;MetaGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetaGet> getMetaWithHttpInfo(String service, String typeStr, String entityUuid, Boolean detailed, Boolean custom, Boolean dates, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = getMetaValidateBeforeCall(service, typeStr, entityUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<MetaGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Meta (asynchronously)
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param dates  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetaAsync(String service, String typeStr, String entityUuid, Boolean detailed, Boolean custom, Boolean dates, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<MetaGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetaValidateBeforeCall(service, typeStr, entityUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<MetaGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMetaFromUuid
     * @param metaUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param dates  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetaFromUuidCall(String metaUuid, Boolean detailed, Boolean custom, Boolean dates, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meta/meta/{meta_uuid}"
            .replaceAll("\\{" + "meta_uuid" + "\\}", localVarApiClient.escapeString(metaUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (detailed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailed", detailed));
        }

        if (custom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom", custom));
        }

        if (dates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dates", dates));
        }

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetaFromUuidValidateBeforeCall(String metaUuid, Boolean detailed, Boolean custom, Boolean dates, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'metaUuid' is set
        if (metaUuid == null) {
            throw new ApiException("Missing the required parameter 'metaUuid' when calling getMetaFromUuid(Async)");
        }
        

        okhttp3.Call localVarCall = getMetaFromUuidCall(metaUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Get Meta From Uuid
     * 
     * @param metaUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param dates  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return MetaGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public MetaGet getMetaFromUuid(String metaUuid, Boolean detailed, Boolean custom, Boolean dates, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<MetaGet> localVarResp = getMetaFromUuidWithHttpInfo(metaUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Get Meta From Uuid
     * 
     * @param metaUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param dates  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;MetaGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetaGet> getMetaFromUuidWithHttpInfo(String metaUuid, Boolean detailed, Boolean custom, Boolean dates, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = getMetaFromUuidValidateBeforeCall(metaUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<MetaGet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Meta From Uuid (asynchronously)
     * 
     * @param metaUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param dates  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetaFromUuidAsync(String metaUuid, Boolean detailed, Boolean custom, Boolean dates, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<MetaGet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetaFromUuidValidateBeforeCall(metaUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<MetaGet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for makeSlug
     * @param metaSlugger  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeSlugCall(MetaSlugger metaSlugger, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metaSlugger;

        // create path and map variables
        String localVarPath = "/meta/meta/slug";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call makeSlugValidateBeforeCall(MetaSlugger metaSlugger, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'metaSlugger' is set
        if (metaSlugger == null) {
            throw new ApiException("Missing the required parameter 'metaSlugger' when calling makeSlug(Async)");
        }
        

        okhttp3.Call localVarCall = makeSlugCall(metaSlugger, _callback);
        return localVarCall;

    }

    /**
     * Make Slug
     * 
     * @param metaSlugger  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object makeSlug(MetaSlugger metaSlugger) throws ApiException {
        ApiResponse<Object> localVarResp = makeSlugWithHttpInfo(metaSlugger);
        return localVarResp.getData();
    }

    /**
     * Make Slug
     * 
     * @param metaSlugger  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> makeSlugWithHttpInfo(MetaSlugger metaSlugger) throws ApiException {
        okhttp3.Call localVarCall = makeSlugValidateBeforeCall(metaSlugger, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Make Slug (asynchronously)
     * 
     * @param metaSlugger  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeSlugAsync(MetaSlugger metaSlugger, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = makeSlugValidateBeforeCall(metaSlugger, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for touchMeta
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call touchMetaCall(String service, String typeStr, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}/touch"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "type_str" + "\\}", localVarApiClient.escapeString(typeStr.toString()))
            .replaceAll("\\{" + "entity_uuid" + "\\}", localVarApiClient.escapeString(entityUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call touchMetaValidateBeforeCall(String service, String typeStr, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling touchMeta(Async)");
        }
        
        // verify the required parameter 'typeStr' is set
        if (typeStr == null) {
            throw new ApiException("Missing the required parameter 'typeStr' when calling touchMeta(Async)");
        }
        
        // verify the required parameter 'entityUuid' is set
        if (entityUuid == null) {
            throw new ApiException("Missing the required parameter 'entityUuid' when calling touchMeta(Async)");
        }
        

        okhttp3.Call localVarCall = touchMetaCall(service, typeStr, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Touch Meta
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return MetaDynamo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public MetaDynamo touchMeta(String service, String typeStr, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<MetaDynamo> localVarResp = touchMetaWithHttpInfo(service, typeStr, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Touch Meta
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;MetaDynamo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetaDynamo> touchMetaWithHttpInfo(String service, String typeStr, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = touchMetaValidateBeforeCall(service, typeStr, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<MetaDynamo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Touch Meta (asynchronously)
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call touchMetaAsync(String service, String typeStr, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<MetaDynamo> _callback) throws ApiException {

        okhttp3.Call localVarCall = touchMetaValidateBeforeCall(service, typeStr, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<MetaDynamo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateField
     * @param fieldUuid  (required)
     * @param field  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFieldCall(String fieldUuid, Field field, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/meta/field/{field_uuid}"
            .replaceAll("\\{" + "field_uuid" + "\\}", localVarApiClient.escapeString(fieldUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFieldValidateBeforeCall(String fieldUuid, Field field, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fieldUuid' is set
        if (fieldUuid == null) {
            throw new ApiException("Missing the required parameter 'fieldUuid' when calling updateField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling updateField(Async)");
        }
        

        okhttp3.Call localVarCall = updateFieldCall(fieldUuid, field, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Update Field
     * 
     * @param fieldUuid  (required)
     * @param field  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateField(String fieldUuid, Field field, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<Object> localVarResp = updateFieldWithHttpInfo(fieldUuid, field, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Update Field
     * 
     * @param fieldUuid  (required)
     * @param field  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateFieldWithHttpInfo(String fieldUuid, Field field, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = updateFieldValidateBeforeCall(fieldUuid, field, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Field (asynchronously)
     * 
     * @param fieldUuid  (required)
     * @param field  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFieldAsync(String fieldUuid, Field field, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFieldValidateBeforeCall(fieldUuid, field, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMeta
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMetaCall(String service, String typeStr, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metaCreate;

        // create path and map variables
        String localVarPath = "/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "type_str" + "\\}", localVarApiClient.escapeString(typeStr.toString()))
            .replaceAll("\\{" + "entity_uuid" + "\\}", localVarApiClient.escapeString(entityUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMetaValidateBeforeCall(String service, String typeStr, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling updateMeta(Async)");
        }
        
        // verify the required parameter 'typeStr' is set
        if (typeStr == null) {
            throw new ApiException("Missing the required parameter 'typeStr' when calling updateMeta(Async)");
        }
        
        // verify the required parameter 'entityUuid' is set
        if (entityUuid == null) {
            throw new ApiException("Missing the required parameter 'entityUuid' when calling updateMeta(Async)");
        }
        
        // verify the required parameter 'metaCreate' is set
        if (metaCreate == null) {
            throw new ApiException("Missing the required parameter 'metaCreate' when calling updateMeta(Async)");
        }
        

        okhttp3.Call localVarCall = updateMetaCall(service, typeStr, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Update Meta
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return MetaDynamo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public MetaDynamo updateMeta(String service, String typeStr, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<MetaDynamo> localVarResp = updateMetaWithHttpInfo(service, typeStr, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Update Meta
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;MetaDynamo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetaDynamo> updateMetaWithHttpInfo(String service, String typeStr, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = updateMetaValidateBeforeCall(service, typeStr, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<MetaDynamo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Meta (asynchronously)
     * 
     * @param service  (required)
     * @param typeStr  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMetaAsync(String service, String typeStr, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<MetaDynamo> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMetaValidateBeforeCall(service, typeStr, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<MetaDynamo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMetaFromUuid
     * @param metaUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMetaFromUuidCall(String metaUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metaCreate;

        // create path and map variables
        String localVarPath = "/meta/meta/{meta_uuid}"
            .replaceAll("\\{" + "meta_uuid" + "\\}", localVarApiClient.escapeString(metaUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMetaFromUuidValidateBeforeCall(String metaUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'metaUuid' is set
        if (metaUuid == null) {
            throw new ApiException("Missing the required parameter 'metaUuid' when calling updateMetaFromUuid(Async)");
        }
        
        // verify the required parameter 'metaCreate' is set
        if (metaCreate == null) {
            throw new ApiException("Missing the required parameter 'metaCreate' when calling updateMetaFromUuid(Async)");
        }
        

        okhttp3.Call localVarCall = updateMetaFromUuidCall(metaUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Update Meta From Uuid
     * 
     * @param metaUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return MetaDynamo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public MetaDynamo updateMetaFromUuid(String metaUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<MetaDynamo> localVarResp = updateMetaFromUuidWithHttpInfo(metaUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Update Meta From Uuid
     * 
     * @param metaUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;MetaDynamo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetaDynamo> updateMetaFromUuidWithHttpInfo(String metaUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = updateMetaFromUuidValidateBeforeCall(metaUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<MetaDynamo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Meta From Uuid (asynchronously)
     * 
     * @param metaUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMetaFromUuidAsync(String metaUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<MetaDynamo> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMetaFromUuidValidateBeforeCall(metaUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<MetaDynamo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
