/*
 * eHelply SDK - 1.1.120
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.120
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ehelply.client.api;

import com.ehelply.client.ApiCallback;
import com.ehelply.client.ApiClient;
import com.ehelply.client.ApiException;
import com.ehelply.client.ApiResponse;
import com.ehelply.client.Configuration;
import com.ehelply.client.Pair;
import com.ehelply.client.ProgressRequestBody;
import com.ehelply.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ehelply.client.model.CreateMeta200Response;
import com.ehelply.client.model.CreateSlug200Response;
import com.ehelply.client.model.DeleteMeta200Response;
import com.ehelply.client.model.GetAppointment403Response;
import com.ehelply.client.model.HTTPValidationError;
import com.ehelply.client.model.MetaCreate;
import com.ehelply.client.model.MetaDynamo;
import com.ehelply.client.model.Slugger;
import com.ehelply.client.model.TouchMeta200Response;
import com.ehelply.client.model.UpdateMeta200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MetaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createMeta
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something went wrong while trying to create a meta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMetaCall(String service, String typeName, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metaCreate;

        // create path and map variables
        String localVarPath = "/meta/meta/service/{service}/type/{type_name}/entity/{entity_uuid}"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "type_name" + "\\}", localVarApiClient.escapeString(typeName.toString()))
            .replaceAll("\\{" + "entity_uuid" + "\\}", localVarApiClient.escapeString(entityUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMetaValidateBeforeCall(String service, String typeName, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling createMeta(Async)");
        }
        
        // verify the required parameter 'typeName' is set
        if (typeName == null) {
            throw new ApiException("Missing the required parameter 'typeName' when calling createMeta(Async)");
        }
        
        // verify the required parameter 'entityUuid' is set
        if (entityUuid == null) {
            throw new ApiException("Missing the required parameter 'entityUuid' when calling createMeta(Async)");
        }
        
        // verify the required parameter 'metaCreate' is set
        if (metaCreate == null) {
            throw new ApiException("Missing the required parameter 'metaCreate' when calling createMeta(Async)");
        }
        

        okhttp3.Call localVarCall = createMetaCall(service, typeName, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Createmeta
     * 
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return CreateMeta200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something went wrong while trying to create a meta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateMeta200Response createMeta(String service, String typeName, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<CreateMeta200Response> localVarResp = createMetaWithHttpInfo(service, typeName, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Createmeta
     * 
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;CreateMeta200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something went wrong while trying to create a meta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateMeta200Response> createMetaWithHttpInfo(String service, String typeName, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = createMetaValidateBeforeCall(service, typeName, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<CreateMeta200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Createmeta (asynchronously)
     * 
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something went wrong while trying to create a meta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMetaAsync(String service, String typeName, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<CreateMeta200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMetaValidateBeforeCall(service, typeName, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<CreateMeta200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSlug
     * @param slugger  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create slug </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSlugCall(Slugger slugger, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slugger;

        // create path and map variables
        String localVarPath = "/meta/slug";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSlugValidateBeforeCall(Slugger slugger, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'slugger' is set
        if (slugger == null) {
            throw new ApiException("Missing the required parameter 'slugger' when calling createSlug(Async)");
        }
        

        okhttp3.Call localVarCall = createSlugCall(slugger, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Createslug
     * 
     * @param slugger  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return CreateSlug200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create slug </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateSlug200Response createSlug(Slugger slugger, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<CreateSlug200Response> localVarResp = createSlugWithHttpInfo(slugger, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Createslug
     * 
     * @param slugger  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;CreateSlug200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create slug </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSlug200Response> createSlugWithHttpInfo(Slugger slugger, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = createSlugValidateBeforeCall(slugger, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<CreateSlug200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Createslug (asynchronously)
     * 
     * @param slugger  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create slug </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSlugAsync(Slugger slugger, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<CreateSlug200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSlugValidateBeforeCall(slugger, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<CreateSlug200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMeta
     * @param metaUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to delete meta(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMetaCall(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meta/meta/{meta_uuid}"
            .replaceAll("\\{" + "meta_uuid" + "\\}", localVarApiClient.escapeString(metaUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMetaValidateBeforeCall(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'metaUuid' is set
        if (metaUuid == null) {
            throw new ApiException("Missing the required parameter 'metaUuid' when calling deleteMeta(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMetaCall(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Deletemeta
     * 
     * @param metaUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return DeleteMeta200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to delete meta(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMeta200Response deleteMeta(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<DeleteMeta200Response> localVarResp = deleteMetaWithHttpInfo(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Deletemeta
     * 
     * @param metaUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;DeleteMeta200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to delete meta(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteMeta200Response> deleteMetaWithHttpInfo(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = deleteMetaValidateBeforeCall(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<DeleteMeta200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletemeta (asynchronously)
     * 
     * @param metaUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to delete meta(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMetaAsync(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<DeleteMeta200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMetaValidateBeforeCall(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<DeleteMeta200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMetaFromParts
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to delete meta(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMetaFromPartsCall(String service, String typeName, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meta/meta/service/{service}/type/{type_name}/entity/{entity_uuid}"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "type_name" + "\\}", localVarApiClient.escapeString(typeName.toString()))
            .replaceAll("\\{" + "entity_uuid" + "\\}", localVarApiClient.escapeString(entityUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMetaFromPartsValidateBeforeCall(String service, String typeName, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling deleteMetaFromParts(Async)");
        }
        
        // verify the required parameter 'typeName' is set
        if (typeName == null) {
            throw new ApiException("Missing the required parameter 'typeName' when calling deleteMetaFromParts(Async)");
        }
        
        // verify the required parameter 'entityUuid' is set
        if (entityUuid == null) {
            throw new ApiException("Missing the required parameter 'entityUuid' when calling deleteMetaFromParts(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMetaFromPartsCall(service, typeName, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Deletemetafromparts
     * 
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return DeleteMeta200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to delete meta(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMeta200Response deleteMetaFromParts(String service, String typeName, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<DeleteMeta200Response> localVarResp = deleteMetaFromPartsWithHttpInfo(service, typeName, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Deletemetafromparts
     * 
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;DeleteMeta200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to delete meta(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteMeta200Response> deleteMetaFromPartsWithHttpInfo(String service, String typeName, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = deleteMetaFromPartsValidateBeforeCall(service, typeName, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<DeleteMeta200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletemetafromparts (asynchronously)
     * 
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to delete meta(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMetaFromPartsAsync(String service, String typeName, String entityUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<DeleteMeta200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMetaFromPartsValidateBeforeCall(service, typeName, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<DeleteMeta200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeta
     * @param metaUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetaCall(String metaUuid, Boolean detailed, Boolean custom, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meta/meta/{meta_uuid}"
            .replaceAll("\\{" + "meta_uuid" + "\\}", localVarApiClient.escapeString(metaUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (detailed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailed", detailed));
        }

        if (custom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom", custom));
        }

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetaValidateBeforeCall(String metaUuid, Boolean detailed, Boolean custom, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'metaUuid' is set
        if (metaUuid == null) {
            throw new ApiException("Missing the required parameter 'metaUuid' when calling getMeta(Async)");
        }
        

        okhttp3.Call localVarCall = getMetaCall(metaUuid, detailed, custom, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Getmeta
     * 
     * @param metaUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return MetaDynamo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public MetaDynamo getMeta(String metaUuid, Boolean detailed, Boolean custom, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<MetaDynamo> localVarResp = getMetaWithHttpInfo(metaUuid, detailed, custom, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Getmeta
     * 
     * @param metaUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;MetaDynamo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetaDynamo> getMetaWithHttpInfo(String metaUuid, Boolean detailed, Boolean custom, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = getMetaValidateBeforeCall(metaUuid, detailed, custom, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<MetaDynamo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getmeta (asynchronously)
     * 
     * @param metaUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetaAsync(String metaUuid, Boolean detailed, Boolean custom, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<MetaDynamo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetaValidateBeforeCall(metaUuid, detailed, custom, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<MetaDynamo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMetaFromParts
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetaFromPartsCall(String service, String typeName, String entityUuid, Boolean detailed, Boolean custom, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meta/meta/service/{service}/type/{type_name}/entity/{entity_uuid}"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "type_name" + "\\}", localVarApiClient.escapeString(typeName.toString()))
            .replaceAll("\\{" + "entity_uuid" + "\\}", localVarApiClient.escapeString(entityUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (detailed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailed", detailed));
        }

        if (custom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom", custom));
        }

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetaFromPartsValidateBeforeCall(String service, String typeName, String entityUuid, Boolean detailed, Boolean custom, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getMetaFromParts(Async)");
        }
        
        // verify the required parameter 'typeName' is set
        if (typeName == null) {
            throw new ApiException("Missing the required parameter 'typeName' when calling getMetaFromParts(Async)");
        }
        
        // verify the required parameter 'entityUuid' is set
        if (entityUuid == null) {
            throw new ApiException("Missing the required parameter 'entityUuid' when calling getMetaFromParts(Async)");
        }
        

        okhttp3.Call localVarCall = getMetaFromPartsCall(service, typeName, entityUuid, detailed, custom, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Getmetafromparts
     * 
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return MetaDynamo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public MetaDynamo getMetaFromParts(String service, String typeName, String entityUuid, Boolean detailed, Boolean custom, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<MetaDynamo> localVarResp = getMetaFromPartsWithHttpInfo(service, typeName, entityUuid, detailed, custom, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Getmetafromparts
     * 
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;MetaDynamo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetaDynamo> getMetaFromPartsWithHttpInfo(String service, String typeName, String entityUuid, Boolean detailed, Boolean custom, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = getMetaFromPartsValidateBeforeCall(service, typeName, entityUuid, detailed, custom, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<MetaDynamo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getmetafromparts (asynchronously)
     * 
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param detailed  (optional, default to false)
     * @param custom  (optional, default to false)
     * @param history  (optional, default to 0)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetaFromPartsAsync(String service, String typeName, String entityUuid, Boolean detailed, Boolean custom, Integer history, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<MetaDynamo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetaFromPartsValidateBeforeCall(service, typeName, entityUuid, detailed, custom, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<MetaDynamo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for touchMeta
     * @param metaUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to touch meta(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call touchMetaCall(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meta/meta/{meta_uuid}/touch"
            .replaceAll("\\{" + "meta_uuid" + "\\}", localVarApiClient.escapeString(metaUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call touchMetaValidateBeforeCall(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'metaUuid' is set
        if (metaUuid == null) {
            throw new ApiException("Missing the required parameter 'metaUuid' when calling touchMeta(Async)");
        }
        

        okhttp3.Call localVarCall = touchMetaCall(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Touchmeta
     * 
     * @param metaUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return TouchMeta200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to touch meta(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public TouchMeta200Response touchMeta(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<TouchMeta200Response> localVarResp = touchMetaWithHttpInfo(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Touchmeta
     * 
     * @param metaUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;TouchMeta200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to touch meta(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TouchMeta200Response> touchMetaWithHttpInfo(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = touchMetaValidateBeforeCall(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<TouchMeta200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Touchmeta (asynchronously)
     * 
     * @param metaUuid  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to touch meta(s) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call touchMetaAsync(String metaUuid, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<TouchMeta200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = touchMetaValidateBeforeCall(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<TouchMeta200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMeta
     * @param metaUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something went wrong while updating meta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMetaCall(String metaUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metaCreate;

        // create path and map variables
        String localVarPath = "/meta/meta/{meta_uuid}"
            .replaceAll("\\{" + "meta_uuid" + "\\}", localVarApiClient.escapeString(metaUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMetaValidateBeforeCall(String metaUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'metaUuid' is set
        if (metaUuid == null) {
            throw new ApiException("Missing the required parameter 'metaUuid' when calling updateMeta(Async)");
        }
        
        // verify the required parameter 'metaCreate' is set
        if (metaCreate == null) {
            throw new ApiException("Missing the required parameter 'metaCreate' when calling updateMeta(Async)");
        }
        

        okhttp3.Call localVarCall = updateMetaCall(metaUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Updatemeta
     * 
     * @param metaUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return UpdateMeta200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something went wrong while updating meta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMeta200Response updateMeta(String metaUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<UpdateMeta200Response> localVarResp = updateMetaWithHttpInfo(metaUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Updatemeta
     * 
     * @param metaUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;UpdateMeta200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something went wrong while updating meta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateMeta200Response> updateMetaWithHttpInfo(String metaUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = updateMetaValidateBeforeCall(metaUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<UpdateMeta200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updatemeta (asynchronously)
     * 
     * @param metaUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something went wrong while updating meta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMetaAsync(String metaUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<UpdateMeta200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMetaValidateBeforeCall(metaUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<UpdateMeta200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMetaFromParts
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something went wrong while updating meta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMetaFromPartsCall(String service, String typeName, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metaCreate;

        // create path and map variables
        String localVarPath = "/meta/meta/service/{service}/type/{type_name}/entity/{entity_uuid}"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "type_name" + "\\}", localVarApiClient.escapeString(typeName.toString()))
            .replaceAll("\\{" + "entity_uuid" + "\\}", localVarApiClient.escapeString(entityUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAccessToken != null) {
            localVarHeaderParams.put("x-access-token", localVarApiClient.parameterToString(xAccessToken));
        }

        if (xSecretToken != null) {
            localVarHeaderParams.put("x-secret-token", localVarApiClient.parameterToString(xSecretToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }

        if (ehelplyActiveParticipant != null) {
            localVarHeaderParams.put("ehelply-active-participant", localVarApiClient.parameterToString(ehelplyActiveParticipant));
        }

        if (ehelplyProject != null) {
            localVarHeaderParams.put("ehelply-project", localVarApiClient.parameterToString(ehelplyProject));
        }

        if (ehelplyData != null) {
            localVarHeaderParams.put("ehelply-data", localVarApiClient.parameterToString(ehelplyData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMetaFromPartsValidateBeforeCall(String service, String typeName, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling updateMetaFromParts(Async)");
        }
        
        // verify the required parameter 'typeName' is set
        if (typeName == null) {
            throw new ApiException("Missing the required parameter 'typeName' when calling updateMetaFromParts(Async)");
        }
        
        // verify the required parameter 'entityUuid' is set
        if (entityUuid == null) {
            throw new ApiException("Missing the required parameter 'entityUuid' when calling updateMetaFromParts(Async)");
        }
        
        // verify the required parameter 'metaCreate' is set
        if (metaCreate == null) {
            throw new ApiException("Missing the required parameter 'metaCreate' when calling updateMetaFromParts(Async)");
        }
        

        okhttp3.Call localVarCall = updateMetaFromPartsCall(service, typeName, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        return localVarCall;

    }

    /**
     * Updatemetafromparts
     * 
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return UpdateMeta200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something went wrong while updating meta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMeta200Response updateMetaFromParts(String service, String typeName, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        ApiResponse<UpdateMeta200Response> localVarResp = updateMetaFromPartsWithHttpInfo(service, typeName, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
        return localVarResp.getData();
    }

    /**
     * Updatemetafromparts
     * 
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @return ApiResponse&lt;UpdateMeta200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something went wrong while updating meta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateMeta200Response> updateMetaFromPartsWithHttpInfo(String service, String typeName, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData) throws ApiException {
        okhttp3.Call localVarCall = updateMetaFromPartsValidateBeforeCall(service, typeName, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, null);
        Type localVarReturnType = new TypeToken<UpdateMeta200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updatemetafromparts (asynchronously)
     * 
     * @param service  (required)
     * @param typeName  (required)
     * @param entityUuid  (required)
     * @param metaCreate  (required)
     * @param xAccessToken  (optional)
     * @param xSecretToken  (optional)
     * @param authorization  (optional)
     * @param ehelplyActiveParticipant  (optional)
     * @param ehelplyProject  (optional)
     * @param ehelplyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something went wrong while updating meta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> meta does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMetaFromPartsAsync(String service, String typeName, String entityUuid, MetaCreate metaCreate, String xAccessToken, String xSecretToken, String authorization, String ehelplyActiveParticipant, String ehelplyProject, String ehelplyData, final ApiCallback<UpdateMeta200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMetaFromPartsValidateBeforeCall(service, typeName, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, _callback);
        Type localVarReturnType = new TypeToken<UpdateMeta200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
