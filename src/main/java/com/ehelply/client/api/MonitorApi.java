/*
 * eHelply SDK - 1.1.105
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.105
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ehelply.client.api;

import com.ehelply.client.ApiCallback;
import com.ehelply.client.ApiClient;
import com.ehelply.client.ApiException;
import com.ehelply.client.ApiResponse;
import com.ehelply.client.Configuration;
import com.ehelply.client.Pair;
import com.ehelply.client.ProgressRequestBody;
import com.ehelply.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ehelply.client.model.AlarmAcknowledge;
import com.ehelply.client.model.AlarmAssign;
import com.ehelply.client.model.AlarmCreate;
import com.ehelply.client.model.AlarmIgnore;
import com.ehelply.client.model.AlarmNote;
import com.ehelply.client.model.AlarmResponse;
import com.ehelply.client.model.AlarmTerminate;
import com.ehelply.client.model.AlarmTicket;
import com.ehelply.client.model.GetServiceServiceWithSpecsResponse;
import com.ehelply.client.model.GetServiceSpecResponse;
import com.ehelply.client.model.GetServiceSpecsResponse;
import com.ehelply.client.model.GetServicesWithSpecs403Response;
import com.ehelply.client.model.HTTPValidationError;
import com.ehelply.client.model.HeartbeatResponse;
import com.ehelply.client.model.KpiResponse;
import com.ehelply.client.model.Page;
import com.ehelply.client.model.ServiceCreate;
import com.ehelply.client.model.ServiceMessageResponse;
import com.ehelply.client.model.ServiceResponse;
import com.ehelply.client.model.StatsVitalsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MonitorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MonitorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MonitorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acknowledgeAlarm
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmAcknowledge  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acknowledgeAlarmCall(String service, String stage, String alarmUuid, AlarmAcknowledge alarmAcknowledge, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alarmAcknowledge;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/acknowledge"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()))
            .replaceAll("\\{" + "alarm_uuid" + "\\}", localVarApiClient.escapeString(alarmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acknowledgeAlarmValidateBeforeCall(String service, String stage, String alarmUuid, AlarmAcknowledge alarmAcknowledge, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling acknowledgeAlarm(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling acknowledgeAlarm(Async)");
        }
        
        // verify the required parameter 'alarmUuid' is set
        if (alarmUuid == null) {
            throw new ApiException("Missing the required parameter 'alarmUuid' when calling acknowledgeAlarm(Async)");
        }
        
        // verify the required parameter 'alarmAcknowledge' is set
        if (alarmAcknowledge == null) {
            throw new ApiException("Missing the required parameter 'alarmAcknowledge' when calling acknowledgeAlarm(Async)");
        }
        

        okhttp3.Call localVarCall = acknowledgeAlarmCall(service, stage, alarmUuid, alarmAcknowledge, _callback);
        return localVarCall;

    }

    /**
     * Acknowledgealarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmAcknowledge  (required)
     * @return AlarmResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AlarmResponse acknowledgeAlarm(String service, String stage, String alarmUuid, AlarmAcknowledge alarmAcknowledge) throws ApiException {
        ApiResponse<AlarmResponse> localVarResp = acknowledgeAlarmWithHttpInfo(service, stage, alarmUuid, alarmAcknowledge);
        return localVarResp.getData();
    }

    /**
     * Acknowledgealarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmAcknowledge  (required)
     * @return ApiResponse&lt;AlarmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlarmResponse> acknowledgeAlarmWithHttpInfo(String service, String stage, String alarmUuid, AlarmAcknowledge alarmAcknowledge) throws ApiException {
        okhttp3.Call localVarCall = acknowledgeAlarmValidateBeforeCall(service, stage, alarmUuid, alarmAcknowledge, null);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Acknowledgealarm (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmAcknowledge  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acknowledgeAlarmAsync(String service, String stage, String alarmUuid, AlarmAcknowledge alarmAcknowledge, final ApiCallback<AlarmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acknowledgeAlarmValidateBeforeCall(service, stage, alarmUuid, alarmAcknowledge, _callback);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assignAlarm
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmAssign  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignAlarmCall(String service, String stage, String alarmUuid, AlarmAssign alarmAssign, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alarmAssign;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/assign"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()))
            .replaceAll("\\{" + "alarm_uuid" + "\\}", localVarApiClient.escapeString(alarmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignAlarmValidateBeforeCall(String service, String stage, String alarmUuid, AlarmAssign alarmAssign, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling assignAlarm(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling assignAlarm(Async)");
        }
        
        // verify the required parameter 'alarmUuid' is set
        if (alarmUuid == null) {
            throw new ApiException("Missing the required parameter 'alarmUuid' when calling assignAlarm(Async)");
        }
        
        // verify the required parameter 'alarmAssign' is set
        if (alarmAssign == null) {
            throw new ApiException("Missing the required parameter 'alarmAssign' when calling assignAlarm(Async)");
        }
        

        okhttp3.Call localVarCall = assignAlarmCall(service, stage, alarmUuid, alarmAssign, _callback);
        return localVarCall;

    }

    /**
     * Assignalarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmAssign  (required)
     * @return AlarmResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AlarmResponse assignAlarm(String service, String stage, String alarmUuid, AlarmAssign alarmAssign) throws ApiException {
        ApiResponse<AlarmResponse> localVarResp = assignAlarmWithHttpInfo(service, stage, alarmUuid, alarmAssign);
        return localVarResp.getData();
    }

    /**
     * Assignalarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmAssign  (required)
     * @return ApiResponse&lt;AlarmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlarmResponse> assignAlarmWithHttpInfo(String service, String stage, String alarmUuid, AlarmAssign alarmAssign) throws ApiException {
        okhttp3.Call localVarCall = assignAlarmValidateBeforeCall(service, stage, alarmUuid, alarmAssign, null);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assignalarm (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmAssign  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignAlarmAsync(String service, String stage, String alarmUuid, AlarmAssign alarmAssign, final ApiCallback<AlarmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignAlarmValidateBeforeCall(service, stage, alarmUuid, alarmAssign, _callback);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachAlarmNote
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmNote  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachAlarmNoteCall(String service, String stage, String alarmUuid, AlarmNote alarmNote, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alarmNote;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/note"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()))
            .replaceAll("\\{" + "alarm_uuid" + "\\}", localVarApiClient.escapeString(alarmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachAlarmNoteValidateBeforeCall(String service, String stage, String alarmUuid, AlarmNote alarmNote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling attachAlarmNote(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling attachAlarmNote(Async)");
        }
        
        // verify the required parameter 'alarmUuid' is set
        if (alarmUuid == null) {
            throw new ApiException("Missing the required parameter 'alarmUuid' when calling attachAlarmNote(Async)");
        }
        
        // verify the required parameter 'alarmNote' is set
        if (alarmNote == null) {
            throw new ApiException("Missing the required parameter 'alarmNote' when calling attachAlarmNote(Async)");
        }
        

        okhttp3.Call localVarCall = attachAlarmNoteCall(service, stage, alarmUuid, alarmNote, _callback);
        return localVarCall;

    }

    /**
     * Attachalarmnote
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmNote  (required)
     * @return AlarmResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AlarmResponse attachAlarmNote(String service, String stage, String alarmUuid, AlarmNote alarmNote) throws ApiException {
        ApiResponse<AlarmResponse> localVarResp = attachAlarmNoteWithHttpInfo(service, stage, alarmUuid, alarmNote);
        return localVarResp.getData();
    }

    /**
     * Attachalarmnote
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmNote  (required)
     * @return ApiResponse&lt;AlarmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlarmResponse> attachAlarmNoteWithHttpInfo(String service, String stage, String alarmUuid, AlarmNote alarmNote) throws ApiException {
        okhttp3.Call localVarCall = attachAlarmNoteValidateBeforeCall(service, stage, alarmUuid, alarmNote, null);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Attachalarmnote (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmNote  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachAlarmNoteAsync(String service, String stage, String alarmUuid, AlarmNote alarmNote, final ApiCallback<AlarmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachAlarmNoteValidateBeforeCall(service, stage, alarmUuid, alarmNote, _callback);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachAlarmTicket
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmTicket  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachAlarmTicketCall(String service, String stage, String alarmUuid, AlarmTicket alarmTicket, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alarmTicket;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ticket"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()))
            .replaceAll("\\{" + "alarm_uuid" + "\\}", localVarApiClient.escapeString(alarmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachAlarmTicketValidateBeforeCall(String service, String stage, String alarmUuid, AlarmTicket alarmTicket, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling attachAlarmTicket(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling attachAlarmTicket(Async)");
        }
        
        // verify the required parameter 'alarmUuid' is set
        if (alarmUuid == null) {
            throw new ApiException("Missing the required parameter 'alarmUuid' when calling attachAlarmTicket(Async)");
        }
        
        // verify the required parameter 'alarmTicket' is set
        if (alarmTicket == null) {
            throw new ApiException("Missing the required parameter 'alarmTicket' when calling attachAlarmTicket(Async)");
        }
        

        okhttp3.Call localVarCall = attachAlarmTicketCall(service, stage, alarmUuid, alarmTicket, _callback);
        return localVarCall;

    }

    /**
     * Attachalarmticket
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmTicket  (required)
     * @return AlarmResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AlarmResponse attachAlarmTicket(String service, String stage, String alarmUuid, AlarmTicket alarmTicket) throws ApiException {
        ApiResponse<AlarmResponse> localVarResp = attachAlarmTicketWithHttpInfo(service, stage, alarmUuid, alarmTicket);
        return localVarResp.getData();
    }

    /**
     * Attachalarmticket
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmTicket  (required)
     * @return ApiResponse&lt;AlarmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlarmResponse> attachAlarmTicketWithHttpInfo(String service, String stage, String alarmUuid, AlarmTicket alarmTicket) throws ApiException {
        okhttp3.Call localVarCall = attachAlarmTicketValidateBeforeCall(service, stage, alarmUuid, alarmTicket, null);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Attachalarmticket (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmTicket  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachAlarmTicketAsync(String service, String stage, String alarmUuid, AlarmTicket alarmTicket, final ApiCallback<AlarmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachAlarmTicketValidateBeforeCall(service, stage, alarmUuid, alarmTicket, _callback);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearAlarm
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearAlarmCall(String service, String stage, String alarmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/clear"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()))
            .replaceAll("\\{" + "alarm_uuid" + "\\}", localVarApiClient.escapeString(alarmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearAlarmValidateBeforeCall(String service, String stage, String alarmUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling clearAlarm(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling clearAlarm(Async)");
        }
        
        // verify the required parameter 'alarmUuid' is set
        if (alarmUuid == null) {
            throw new ApiException("Missing the required parameter 'alarmUuid' when calling clearAlarm(Async)");
        }
        

        okhttp3.Call localVarCall = clearAlarmCall(service, stage, alarmUuid, _callback);
        return localVarCall;

    }

    /**
     * Clearalarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @return AlarmResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AlarmResponse clearAlarm(String service, String stage, String alarmUuid) throws ApiException {
        ApiResponse<AlarmResponse> localVarResp = clearAlarmWithHttpInfo(service, stage, alarmUuid);
        return localVarResp.getData();
    }

    /**
     * Clearalarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @return ApiResponse&lt;AlarmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlarmResponse> clearAlarmWithHttpInfo(String service, String stage, String alarmUuid) throws ApiException {
        okhttp3.Call localVarCall = clearAlarmValidateBeforeCall(service, stage, alarmUuid, null);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clearalarm (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearAlarmAsync(String service, String stage, String alarmUuid, final ApiCallback<AlarmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearAlarmValidateBeforeCall(service, stage, alarmUuid, _callback);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getService
     * @param service  (required)
     * @param heartbeats  (optional, default to false)
     * @param heartbeatLimit  (optional, default to 5)
     * @param alarms  (optional, default to false)
     * @param alarmLimit  (optional, default to 5)
     * @param stage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceCall(String service, Boolean heartbeats, Integer heartbeatLimit, Boolean alarms, Integer alarmLimit, String stage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (heartbeats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("heartbeats", heartbeats));
        }

        if (heartbeatLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("heartbeat_limit", heartbeatLimit));
        }

        if (alarms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alarms", alarms));
        }

        if (alarmLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alarm_limit", alarmLimit));
        }

        if (stage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage", stage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceValidateBeforeCall(String service, Boolean heartbeats, Integer heartbeatLimit, Boolean alarms, Integer alarmLimit, String stage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getService(Async)");
        }
        

        okhttp3.Call localVarCall = getServiceCall(service, heartbeats, heartbeatLimit, alarms, alarmLimit, stage, _callback);
        return localVarCall;

    }

    /**
     * Getservice
     * 
     * @param service  (required)
     * @param heartbeats  (optional, default to false)
     * @param heartbeatLimit  (optional, default to 5)
     * @param alarms  (optional, default to false)
     * @param alarmLimit  (optional, default to 5)
     * @param stage  (optional)
     * @return ServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceResponse getService(String service, Boolean heartbeats, Integer heartbeatLimit, Boolean alarms, Integer alarmLimit, String stage) throws ApiException {
        ApiResponse<ServiceResponse> localVarResp = getServiceWithHttpInfo(service, heartbeats, heartbeatLimit, alarms, alarmLimit, stage);
        return localVarResp.getData();
    }

    /**
     * Getservice
     * 
     * @param service  (required)
     * @param heartbeats  (optional, default to false)
     * @param heartbeatLimit  (optional, default to 5)
     * @param alarms  (optional, default to false)
     * @param alarmLimit  (optional, default to 5)
     * @param stage  (optional)
     * @return ApiResponse&lt;ServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceResponse> getServiceWithHttpInfo(String service, Boolean heartbeats, Integer heartbeatLimit, Boolean alarms, Integer alarmLimit, String stage) throws ApiException {
        okhttp3.Call localVarCall = getServiceValidateBeforeCall(service, heartbeats, heartbeatLimit, alarms, alarmLimit, stage, null);
        Type localVarReturnType = new TypeToken<ServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getservice (asynchronously)
     * 
     * @param service  (required)
     * @param heartbeats  (optional, default to false)
     * @param heartbeatLimit  (optional, default to 5)
     * @param alarms  (optional, default to false)
     * @param alarmLimit  (optional, default to 5)
     * @param stage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceAsync(String service, Boolean heartbeats, Integer heartbeatLimit, Boolean alarms, Integer alarmLimit, String stage, final ApiCallback<ServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceValidateBeforeCall(service, heartbeats, heartbeatLimit, alarms, alarmLimit, stage, _callback);
        Type localVarReturnType = new TypeToken<ServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceAlarm
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceAlarmCall(String service, String stage, String alarmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()))
            .replaceAll("\\{" + "alarm_uuid" + "\\}", localVarApiClient.escapeString(alarmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceAlarmValidateBeforeCall(String service, String stage, String alarmUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getServiceAlarm(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling getServiceAlarm(Async)");
        }
        
        // verify the required parameter 'alarmUuid' is set
        if (alarmUuid == null) {
            throw new ApiException("Missing the required parameter 'alarmUuid' when calling getServiceAlarm(Async)");
        }
        

        okhttp3.Call localVarCall = getServiceAlarmCall(service, stage, alarmUuid, _callback);
        return localVarCall;

    }

    /**
     * Getservicealarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @return AlarmResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AlarmResponse getServiceAlarm(String service, String stage, String alarmUuid) throws ApiException {
        ApiResponse<AlarmResponse> localVarResp = getServiceAlarmWithHttpInfo(service, stage, alarmUuid);
        return localVarResp.getData();
    }

    /**
     * Getservicealarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @return ApiResponse&lt;AlarmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlarmResponse> getServiceAlarmWithHttpInfo(String service, String stage, String alarmUuid) throws ApiException {
        okhttp3.Call localVarCall = getServiceAlarmValidateBeforeCall(service, stage, alarmUuid, null);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getservicealarm (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceAlarmAsync(String service, String stage, String alarmUuid, final ApiCallback<AlarmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceAlarmValidateBeforeCall(service, stage, alarmUuid, _callback);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceAlarms
     * @param service  (required)
     * @param stage  (required)
     * @param history  (optional, default to 5)
     * @param includeTerminated  (optional, default to false)
     * @param includeCleared  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceAlarmsCall(String service, String stage, Integer history, Boolean includeTerminated, Boolean includeCleared, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/alarms"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        if (includeTerminated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_terminated", includeTerminated));
        }

        if (includeCleared != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_cleared", includeCleared));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceAlarmsValidateBeforeCall(String service, String stage, Integer history, Boolean includeTerminated, Boolean includeCleared, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getServiceAlarms(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling getServiceAlarms(Async)");
        }
        

        okhttp3.Call localVarCall = getServiceAlarmsCall(service, stage, history, includeTerminated, includeCleared, _callback);
        return localVarCall;

    }

    /**
     * Getservicealarms
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param history  (optional, default to 5)
     * @param includeTerminated  (optional, default to false)
     * @param includeCleared  (optional, default to false)
     * @return List&lt;AlarmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AlarmResponse> getServiceAlarms(String service, String stage, Integer history, Boolean includeTerminated, Boolean includeCleared) throws ApiException {
        ApiResponse<List<AlarmResponse>> localVarResp = getServiceAlarmsWithHttpInfo(service, stage, history, includeTerminated, includeCleared);
        return localVarResp.getData();
    }

    /**
     * Getservicealarms
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param history  (optional, default to 5)
     * @param includeTerminated  (optional, default to false)
     * @param includeCleared  (optional, default to false)
     * @return ApiResponse&lt;List&lt;AlarmResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AlarmResponse>> getServiceAlarmsWithHttpInfo(String service, String stage, Integer history, Boolean includeTerminated, Boolean includeCleared) throws ApiException {
        okhttp3.Call localVarCall = getServiceAlarmsValidateBeforeCall(service, stage, history, includeTerminated, includeCleared, null);
        Type localVarReturnType = new TypeToken<List<AlarmResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getservicealarms (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param history  (optional, default to 5)
     * @param includeTerminated  (optional, default to false)
     * @param includeCleared  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceAlarmsAsync(String service, String stage, Integer history, Boolean includeTerminated, Boolean includeCleared, final ApiCallback<List<AlarmResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceAlarmsValidateBeforeCall(service, stage, history, includeTerminated, includeCleared, _callback);
        Type localVarReturnType = new TypeToken<List<AlarmResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceHeartbeat
     * @param service  (required)
     * @param stage  (required)
     * @param history  (optional, default to 5)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceHeartbeatCall(String service, String stage, Integer history, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/heartbeats"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceHeartbeatValidateBeforeCall(String service, String stage, Integer history, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getServiceHeartbeat(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling getServiceHeartbeat(Async)");
        }
        

        okhttp3.Call localVarCall = getServiceHeartbeatCall(service, stage, history, _callback);
        return localVarCall;

    }

    /**
     * Getserviceheartbeat
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param history  (optional, default to 5)
     * @return List&lt;HeartbeatResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<HeartbeatResponse> getServiceHeartbeat(String service, String stage, Integer history) throws ApiException {
        ApiResponse<List<HeartbeatResponse>> localVarResp = getServiceHeartbeatWithHttpInfo(service, stage, history);
        return localVarResp.getData();
    }

    /**
     * Getserviceheartbeat
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param history  (optional, default to 5)
     * @return ApiResponse&lt;List&lt;HeartbeatResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HeartbeatResponse>> getServiceHeartbeatWithHttpInfo(String service, String stage, Integer history) throws ApiException {
        okhttp3.Call localVarCall = getServiceHeartbeatValidateBeforeCall(service, stage, history, null);
        Type localVarReturnType = new TypeToken<List<HeartbeatResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getserviceheartbeat (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param history  (optional, default to 5)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceHeartbeatAsync(String service, String stage, Integer history, final ApiCallback<List<HeartbeatResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceHeartbeatValidateBeforeCall(service, stage, history, _callback);
        Type localVarReturnType = new TypeToken<List<HeartbeatResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceKpis
     * @param service  (required)
     * @param history  (optional, default to 5)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceKpisCall(String service, Integer history, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/kpis"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceKpisValidateBeforeCall(String service, Integer history, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getServiceKpis(Async)");
        }
        

        okhttp3.Call localVarCall = getServiceKpisCall(service, history, _callback);
        return localVarCall;

    }

    /**
     * Getservicekpis
     * 
     * @param service  (required)
     * @param history  (optional, default to 5)
     * @return List&lt;KpiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<KpiResponse> getServiceKpis(String service, Integer history) throws ApiException {
        ApiResponse<List<KpiResponse>> localVarResp = getServiceKpisWithHttpInfo(service, history);
        return localVarResp.getData();
    }

    /**
     * Getservicekpis
     * 
     * @param service  (required)
     * @param history  (optional, default to 5)
     * @return ApiResponse&lt;List&lt;KpiResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KpiResponse>> getServiceKpisWithHttpInfo(String service, Integer history) throws ApiException {
        okhttp3.Call localVarCall = getServiceKpisValidateBeforeCall(service, history, null);
        Type localVarReturnType = new TypeToken<List<KpiResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getservicekpis (asynchronously)
     * 
     * @param service  (required)
     * @param history  (optional, default to 5)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceKpisAsync(String service, Integer history, final ApiCallback<List<KpiResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceKpisValidateBeforeCall(service, history, _callback);
        Type localVarReturnType = new TypeToken<List<KpiResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceSpec
     * @param service  (required)
     * @param spec  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceSpecCall(String service, String spec, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/specs/{spec}"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "spec" + "\\}", localVarApiClient.escapeString(spec.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceSpecValidateBeforeCall(String service, String spec, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getServiceSpec(Async)");
        }
        
        // verify the required parameter 'spec' is set
        if (spec == null) {
            throw new ApiException("Missing the required parameter 'spec' when calling getServiceSpec(Async)");
        }
        

        okhttp3.Call localVarCall = getServiceSpecCall(service, spec, _callback);
        return localVarCall;

    }

    /**
     * Getservicespec
     * 
     * @param service  (required)
     * @param spec  (required)
     * @return GetServiceSpecResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public GetServiceSpecResponse getServiceSpec(String service, String spec) throws ApiException {
        ApiResponse<GetServiceSpecResponse> localVarResp = getServiceSpecWithHttpInfo(service, spec);
        return localVarResp.getData();
    }

    /**
     * Getservicespec
     * 
     * @param service  (required)
     * @param spec  (required)
     * @return ApiResponse&lt;GetServiceSpecResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetServiceSpecResponse> getServiceSpecWithHttpInfo(String service, String spec) throws ApiException {
        okhttp3.Call localVarCall = getServiceSpecValidateBeforeCall(service, spec, null);
        Type localVarReturnType = new TypeToken<GetServiceSpecResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getservicespec (asynchronously)
     * 
     * @param service  (required)
     * @param spec  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceSpecAsync(String service, String spec, final ApiCallback<GetServiceSpecResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceSpecValidateBeforeCall(service, spec, _callback);
        Type localVarReturnType = new TypeToken<GetServiceSpecResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceSpecs
     * @param service  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceSpecsCall(String service, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/specs"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceSpecsValidateBeforeCall(String service, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getServiceSpecs(Async)");
        }
        

        okhttp3.Call localVarCall = getServiceSpecsCall(service, _callback);
        return localVarCall;

    }

    /**
     * Getservicespecs
     * 
     * @param service  (required)
     * @return GetServiceSpecsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public GetServiceSpecsResponse getServiceSpecs(String service) throws ApiException {
        ApiResponse<GetServiceSpecsResponse> localVarResp = getServiceSpecsWithHttpInfo(service);
        return localVarResp.getData();
    }

    /**
     * Getservicespecs
     * 
     * @param service  (required)
     * @return ApiResponse&lt;GetServiceSpecsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetServiceSpecsResponse> getServiceSpecsWithHttpInfo(String service) throws ApiException {
        okhttp3.Call localVarCall = getServiceSpecsValidateBeforeCall(service, null);
        Type localVarReturnType = new TypeToken<GetServiceSpecsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getservicespecs (asynchronously)
     * 
     * @param service  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceSpecsAsync(String service, final ApiCallback<GetServiceSpecsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceSpecsValidateBeforeCall(service, _callback);
        Type localVarReturnType = new TypeToken<GetServiceSpecsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceVitals
     * @param service  (required)
     * @param stage  (required)
     * @param history  (optional, default to 5)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceVitalsCall(String service, String stage, Integer history, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/vitals"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceVitalsValidateBeforeCall(String service, String stage, Integer history, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getServiceVitals(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling getServiceVitals(Async)");
        }
        

        okhttp3.Call localVarCall = getServiceVitalsCall(service, stage, history, _callback);
        return localVarCall;

    }

    /**
     * Getservicevitals
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param history  (optional, default to 5)
     * @return List&lt;StatsVitalsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<StatsVitalsResponse> getServiceVitals(String service, String stage, Integer history) throws ApiException {
        ApiResponse<List<StatsVitalsResponse>> localVarResp = getServiceVitalsWithHttpInfo(service, stage, history);
        return localVarResp.getData();
    }

    /**
     * Getservicevitals
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param history  (optional, default to 5)
     * @return ApiResponse&lt;List&lt;StatsVitalsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StatsVitalsResponse>> getServiceVitalsWithHttpInfo(String service, String stage, Integer history) throws ApiException {
        okhttp3.Call localVarCall = getServiceVitalsValidateBeforeCall(service, stage, history, null);
        Type localVarReturnType = new TypeToken<List<StatsVitalsResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getservicevitals (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param history  (optional, default to 5)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceVitalsAsync(String service, String stage, Integer history, final ApiCallback<List<StatsVitalsResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceVitalsValidateBeforeCall(service, stage, history, _callback);
        Type localVarReturnType = new TypeToken<List<StatsVitalsResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServices
     * @param heartbeats  (optional, default to false)
     * @param heartbeatLimit  (optional, default to 5)
     * @param alarms  (optional, default to false)
     * @param alarmLimit  (optional, default to 5)
     * @param includeHidden  (optional, default to false)
     * @param stage  (optional)
     * @param key  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesCall(Boolean heartbeats, Integer heartbeatLimit, Boolean alarms, Integer alarmLimit, Boolean includeHidden, String stage, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (heartbeats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("heartbeats", heartbeats));
        }

        if (heartbeatLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("heartbeat_limit", heartbeatLimit));
        }

        if (alarms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alarms", alarms));
        }

        if (alarmLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alarm_limit", alarmLimit));
        }

        if (includeHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_hidden", includeHidden));
        }

        if (stage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage", stage));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServicesValidateBeforeCall(Boolean heartbeats, Integer heartbeatLimit, Boolean alarms, Integer alarmLimit, Boolean includeHidden, String stage, String key, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getServicesCall(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key, _callback);
        return localVarCall;

    }

    /**
     * Getservices
     * 
     * @param heartbeats  (optional, default to false)
     * @param heartbeatLimit  (optional, default to 5)
     * @param alarms  (optional, default to false)
     * @param alarmLimit  (optional, default to 5)
     * @param includeHidden  (optional, default to false)
     * @param stage  (optional)
     * @param key  (optional)
     * @return List&lt;ServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ServiceResponse> getServices(Boolean heartbeats, Integer heartbeatLimit, Boolean alarms, Integer alarmLimit, Boolean includeHidden, String stage, String key) throws ApiException {
        ApiResponse<List<ServiceResponse>> localVarResp = getServicesWithHttpInfo(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key);
        return localVarResp.getData();
    }

    /**
     * Getservices
     * 
     * @param heartbeats  (optional, default to false)
     * @param heartbeatLimit  (optional, default to 5)
     * @param alarms  (optional, default to false)
     * @param alarmLimit  (optional, default to 5)
     * @param includeHidden  (optional, default to false)
     * @param stage  (optional)
     * @param key  (optional)
     * @return ApiResponse&lt;List&lt;ServiceResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ServiceResponse>> getServicesWithHttpInfo(Boolean heartbeats, Integer heartbeatLimit, Boolean alarms, Integer alarmLimit, Boolean includeHidden, String stage, String key) throws ApiException {
        okhttp3.Call localVarCall = getServicesValidateBeforeCall(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key, null);
        Type localVarReturnType = new TypeToken<List<ServiceResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getservices (asynchronously)
     * 
     * @param heartbeats  (optional, default to false)
     * @param heartbeatLimit  (optional, default to 5)
     * @param alarms  (optional, default to false)
     * @param alarmLimit  (optional, default to 5)
     * @param includeHidden  (optional, default to false)
     * @param stage  (optional)
     * @param key  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesAsync(Boolean heartbeats, Integer heartbeatLimit, Boolean alarms, Integer alarmLimit, Boolean includeHidden, String stage, String key, final ApiCallback<List<ServiceResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServicesValidateBeforeCall(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key, _callback);
        Type localVarReturnType = new TypeToken<List<ServiceResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServicesWithSpecs
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesWithSpecsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/specs/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServicesWithSpecsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getServicesWithSpecsCall(_callback);
        return localVarCall;

    }

    /**
     * Getserviceswithspecs
     * 
     * @return GetServiceServiceWithSpecsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public GetServiceServiceWithSpecsResponse getServicesWithSpecs() throws ApiException {
        ApiResponse<GetServiceServiceWithSpecsResponse> localVarResp = getServicesWithSpecsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Getserviceswithspecs
     * 
     * @return ApiResponse&lt;GetServiceServiceWithSpecsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetServiceServiceWithSpecsResponse> getServicesWithSpecsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getServicesWithSpecsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetServiceServiceWithSpecsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Getserviceswithspecs (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized - Denied by eHelply </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesWithSpecsAsync(final ApiCallback<GetServiceServiceWithSpecsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServicesWithSpecsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetServiceServiceWithSpecsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hideService
     * @param service  (required)
     * @param stage  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hideServiceCall(String service, String stage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/hide"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hideServiceValidateBeforeCall(String service, String stage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling hideService(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling hideService(Async)");
        }
        

        okhttp3.Call localVarCall = hideServiceCall(service, stage, _callback);
        return localVarCall;

    }

    /**
     * Hideservice
     * 
     * @param service  (required)
     * @param stage  (required)
     * @return ServiceMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceMessageResponse hideService(String service, String stage) throws ApiException {
        ApiResponse<ServiceMessageResponse> localVarResp = hideServiceWithHttpInfo(service, stage);
        return localVarResp.getData();
    }

    /**
     * Hideservice
     * 
     * @param service  (required)
     * @param stage  (required)
     * @return ApiResponse&lt;ServiceMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceMessageResponse> hideServiceWithHttpInfo(String service, String stage) throws ApiException {
        okhttp3.Call localVarCall = hideServiceValidateBeforeCall(service, stage, null);
        Type localVarReturnType = new TypeToken<ServiceMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Hideservice (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hideServiceAsync(String service, String stage, final ApiCallback<ServiceMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = hideServiceValidateBeforeCall(service, stage, _callback);
        Type localVarReturnType = new TypeToken<ServiceMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ignoreAlarm
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmIgnore  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ignoreAlarmCall(String service, String stage, String alarmUuid, AlarmIgnore alarmIgnore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alarmIgnore;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ignore"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()))
            .replaceAll("\\{" + "alarm_uuid" + "\\}", localVarApiClient.escapeString(alarmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ignoreAlarmValidateBeforeCall(String service, String stage, String alarmUuid, AlarmIgnore alarmIgnore, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling ignoreAlarm(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling ignoreAlarm(Async)");
        }
        
        // verify the required parameter 'alarmUuid' is set
        if (alarmUuid == null) {
            throw new ApiException("Missing the required parameter 'alarmUuid' when calling ignoreAlarm(Async)");
        }
        
        // verify the required parameter 'alarmIgnore' is set
        if (alarmIgnore == null) {
            throw new ApiException("Missing the required parameter 'alarmIgnore' when calling ignoreAlarm(Async)");
        }
        

        okhttp3.Call localVarCall = ignoreAlarmCall(service, stage, alarmUuid, alarmIgnore, _callback);
        return localVarCall;

    }

    /**
     * Ignorealarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmIgnore  (required)
     * @return AlarmResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AlarmResponse ignoreAlarm(String service, String stage, String alarmUuid, AlarmIgnore alarmIgnore) throws ApiException {
        ApiResponse<AlarmResponse> localVarResp = ignoreAlarmWithHttpInfo(service, stage, alarmUuid, alarmIgnore);
        return localVarResp.getData();
    }

    /**
     * Ignorealarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmIgnore  (required)
     * @return ApiResponse&lt;AlarmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlarmResponse> ignoreAlarmWithHttpInfo(String service, String stage, String alarmUuid, AlarmIgnore alarmIgnore) throws ApiException {
        okhttp3.Call localVarCall = ignoreAlarmValidateBeforeCall(service, stage, alarmUuid, alarmIgnore, null);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ignorealarm (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmIgnore  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ignoreAlarmAsync(String service, String stage, String alarmUuid, AlarmIgnore alarmIgnore, final ApiCallback<AlarmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ignoreAlarmValidateBeforeCall(service, stage, alarmUuid, alarmIgnore, _callback);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerService
     * @param serviceCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerServiceCall(ServiceCreate serviceCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceCreate;

        // create path and map variables
        String localVarPath = "/sam/monitor/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerServiceValidateBeforeCall(ServiceCreate serviceCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serviceCreate' is set
        if (serviceCreate == null) {
            throw new ApiException("Missing the required parameter 'serviceCreate' when calling registerService(Async)");
        }
        

        okhttp3.Call localVarCall = registerServiceCall(serviceCreate, _callback);
        return localVarCall;

    }

    /**
     * Registerservice
     * 
     * @param serviceCreate  (required)
     * @return ServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceResponse registerService(ServiceCreate serviceCreate) throws ApiException {
        ApiResponse<ServiceResponse> localVarResp = registerServiceWithHttpInfo(serviceCreate);
        return localVarResp.getData();
    }

    /**
     * Registerservice
     * 
     * @param serviceCreate  (required)
     * @return ApiResponse&lt;ServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceResponse> registerServiceWithHttpInfo(ServiceCreate serviceCreate) throws ApiException {
        okhttp3.Call localVarCall = registerServiceValidateBeforeCall(serviceCreate, null);
        Type localVarReturnType = new TypeToken<ServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Registerservice (asynchronously)
     * 
     * @param serviceCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerServiceAsync(ServiceCreate serviceCreate, final ApiCallback<ServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerServiceValidateBeforeCall(serviceCreate, _callback);
        Type localVarReturnType = new TypeToken<ServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAlarms
     * @param service  (required)
     * @param page  (optional, default to 1)
     * @param pageSize  (optional, default to 25)
     * @param search  (optional)
     * @param searchOn  (optional)
     * @param sortOn  (optional)
     * @param sortDesc  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAlarmsCall(String service, Integer page, Integer pageSize, String search, String searchOn, String sortOn, Boolean sortDesc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/alarms"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (searchOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_on", searchOn));
        }

        if (sortOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_on", sortOn));
        }

        if (sortDesc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_desc", sortDesc));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAlarmsValidateBeforeCall(String service, Integer page, Integer pageSize, String search, String searchOn, String sortOn, Boolean sortDesc, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling searchAlarms(Async)");
        }
        

        okhttp3.Call localVarCall = searchAlarmsCall(service, page, pageSize, search, searchOn, sortOn, sortDesc, _callback);
        return localVarCall;

    }

    /**
     * Searchalarms
     * 
     * @param service  (required)
     * @param page  (optional, default to 1)
     * @param pageSize  (optional, default to 25)
     * @param search  (optional)
     * @param searchOn  (optional)
     * @param sortOn  (optional)
     * @param sortDesc  (optional, default to false)
     * @return Page
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Page searchAlarms(String service, Integer page, Integer pageSize, String search, String searchOn, String sortOn, Boolean sortDesc) throws ApiException {
        ApiResponse<Page> localVarResp = searchAlarmsWithHttpInfo(service, page, pageSize, search, searchOn, sortOn, sortDesc);
        return localVarResp.getData();
    }

    /**
     * Searchalarms
     * 
     * @param service  (required)
     * @param page  (optional, default to 1)
     * @param pageSize  (optional, default to 25)
     * @param search  (optional)
     * @param searchOn  (optional)
     * @param sortOn  (optional)
     * @param sortDesc  (optional, default to false)
     * @return ApiResponse&lt;Page&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Page> searchAlarmsWithHttpInfo(String service, Integer page, Integer pageSize, String search, String searchOn, String sortOn, Boolean sortDesc) throws ApiException {
        okhttp3.Call localVarCall = searchAlarmsValidateBeforeCall(service, page, pageSize, search, searchOn, sortOn, sortDesc, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searchalarms (asynchronously)
     * 
     * @param service  (required)
     * @param page  (optional, default to 1)
     * @param pageSize  (optional, default to 25)
     * @param search  (optional)
     * @param searchOn  (optional)
     * @param sortOn  (optional)
     * @param sortDesc  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAlarmsAsync(String service, Integer page, Integer pageSize, String search, String searchOn, String sortOn, Boolean sortDesc, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAlarmsValidateBeforeCall(service, page, pageSize, search, searchOn, sortOn, sortDesc, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showService
     * @param service  (required)
     * @param stage  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showServiceCall(String service, String stage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/show"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showServiceValidateBeforeCall(String service, String stage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling showService(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling showService(Async)");
        }
        

        okhttp3.Call localVarCall = showServiceCall(service, stage, _callback);
        return localVarCall;

    }

    /**
     * Showservice
     * 
     * @param service  (required)
     * @param stage  (required)
     * @return ServiceMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceMessageResponse showService(String service, String stage) throws ApiException {
        ApiResponse<ServiceMessageResponse> localVarResp = showServiceWithHttpInfo(service, stage);
        return localVarResp.getData();
    }

    /**
     * Showservice
     * 
     * @param service  (required)
     * @param stage  (required)
     * @return ApiResponse&lt;ServiceMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceMessageResponse> showServiceWithHttpInfo(String service, String stage) throws ApiException {
        okhttp3.Call localVarCall = showServiceValidateBeforeCall(service, stage, null);
        Type localVarReturnType = new TypeToken<ServiceMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Showservice (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showServiceAsync(String service, String stage, final ApiCallback<ServiceMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showServiceValidateBeforeCall(service, stage, _callback);
        Type localVarReturnType = new TypeToken<ServiceMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for terminateAlarm
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmTerminate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call terminateAlarmCall(String service, String stage, String alarmUuid, AlarmTerminate alarmTerminate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alarmTerminate;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/terminate"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()))
            .replaceAll("\\{" + "alarm_uuid" + "\\}", localVarApiClient.escapeString(alarmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call terminateAlarmValidateBeforeCall(String service, String stage, String alarmUuid, AlarmTerminate alarmTerminate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling terminateAlarm(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling terminateAlarm(Async)");
        }
        
        // verify the required parameter 'alarmUuid' is set
        if (alarmUuid == null) {
            throw new ApiException("Missing the required parameter 'alarmUuid' when calling terminateAlarm(Async)");
        }
        
        // verify the required parameter 'alarmTerminate' is set
        if (alarmTerminate == null) {
            throw new ApiException("Missing the required parameter 'alarmTerminate' when calling terminateAlarm(Async)");
        }
        

        okhttp3.Call localVarCall = terminateAlarmCall(service, stage, alarmUuid, alarmTerminate, _callback);
        return localVarCall;

    }

    /**
     * Terminatealarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmTerminate  (required)
     * @return AlarmResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AlarmResponse terminateAlarm(String service, String stage, String alarmUuid, AlarmTerminate alarmTerminate) throws ApiException {
        ApiResponse<AlarmResponse> localVarResp = terminateAlarmWithHttpInfo(service, stage, alarmUuid, alarmTerminate);
        return localVarResp.getData();
    }

    /**
     * Terminatealarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmTerminate  (required)
     * @return ApiResponse&lt;AlarmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlarmResponse> terminateAlarmWithHttpInfo(String service, String stage, String alarmUuid, AlarmTerminate alarmTerminate) throws ApiException {
        okhttp3.Call localVarCall = terminateAlarmValidateBeforeCall(service, stage, alarmUuid, alarmTerminate, null);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Terminatealarm (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmUuid  (required)
     * @param alarmTerminate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call terminateAlarmAsync(String service, String stage, String alarmUuid, AlarmTerminate alarmTerminate, final ApiCallback<AlarmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = terminateAlarmValidateBeforeCall(service, stage, alarmUuid, alarmTerminate, _callback);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggerAlarm
     * @param service  (required)
     * @param stage  (required)
     * @param alarmCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggerAlarmCall(String service, String stage, AlarmCreate alarmCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alarmCreate;

        // create path and map variables
        String localVarPath = "/sam/monitor/services/{service}/stages/{stage}/alarms"
            .replaceAll("\\{" + "service" + "\\}", localVarApiClient.escapeString(service.toString()))
            .replaceAll("\\{" + "stage" + "\\}", localVarApiClient.escapeString(stage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggerAlarmValidateBeforeCall(String service, String stage, AlarmCreate alarmCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling triggerAlarm(Async)");
        }
        
        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling triggerAlarm(Async)");
        }
        
        // verify the required parameter 'alarmCreate' is set
        if (alarmCreate == null) {
            throw new ApiException("Missing the required parameter 'alarmCreate' when calling triggerAlarm(Async)");
        }
        

        okhttp3.Call localVarCall = triggerAlarmCall(service, stage, alarmCreate, _callback);
        return localVarCall;

    }

    /**
     * Triggeralarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmCreate  (required)
     * @return AlarmResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public AlarmResponse triggerAlarm(String service, String stage, AlarmCreate alarmCreate) throws ApiException {
        ApiResponse<AlarmResponse> localVarResp = triggerAlarmWithHttpInfo(service, stage, alarmCreate);
        return localVarResp.getData();
    }

    /**
     * Triggeralarm
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmCreate  (required)
     * @return ApiResponse&lt;AlarmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlarmResponse> triggerAlarmWithHttpInfo(String service, String stage, AlarmCreate alarmCreate) throws ApiException {
        okhttp3.Call localVarCall = triggerAlarmValidateBeforeCall(service, stage, alarmCreate, null);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Triggeralarm (asynchronously)
     * 
     * @param service  (required)
     * @param stage  (required)
     * @param alarmCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggerAlarmAsync(String service, String stage, AlarmCreate alarmCreate, final ApiCallback<AlarmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggerAlarmValidateBeforeCall(service, stage, alarmCreate, _callback);
        Type localVarReturnType = new TypeToken<AlarmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
